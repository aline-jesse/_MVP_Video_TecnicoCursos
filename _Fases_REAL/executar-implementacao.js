/**
 * üöÄ SCRIPT DE EXECU√á√ÉO - IMPLEMENTA√á√ÉO 100% REAL
 * 
 * Script para executar o sistema automatizado de implementa√ß√£o
 */

const { execSync } = require('child_process');
const path = require('path');

console.log('üöÄ INICIANDO IMPLEMENTA√á√ÉO CONT√çNUA E EFICIENTE');
console.log('================================================');

try {
  // Executar valida√ß√£o de especifica√ß√µes
  console.log('\nüß™ Validando especifica√ß√µes (SpecValidator)...');
  const specValidatorPath = path.join(__dirname, '..', '.trae', 'tools', 'spec_validator.js');
  execSync(`node "${specValidatorPath}"`, { stdio: 'inherit' });
  console.log('   ‚úÖ SpecValidator conclu√≠do. Relat√≥rios em _Fases_REAL');

  // Executar auditoria de cobertura de features
  console.log('\nüìä Auditando cobertura de features (FeatureCoverage)...');
  const featureCoveragePath = path.join(__dirname, '..', '.trae', 'tools', 'feature_coverage.js');
  execSync(`node "${featureCoveragePath}"`, { stdio: 'inherit' });
  console.log('   ‚úÖ FeatureCoverage conclu√≠do. Relat√≥rios em _Fases_REAL');

  // Executar sincroniza√ß√£o de documenta√ß√£o (DocSync)
  console.log('\nüß≠ Sincronizando documenta√ß√£o e gerando plano (DocSync)...');
  const docSyncPath = path.join(__dirname, '..', '.trae', 'tools', 'doc_sync.js');
  execSync(`node "${docSyncPath}" --run`, { stdio: 'inherit' });
  console.log('   ‚úÖ DocSync conclu√≠do com sucesso. Artefatos gerados em _Fases_REAL');

  // Navegar para o diret√≥rio do projeto
  const projectDir = path.join(__dirname, '..', 'estudio_ia_videos');
  process.chdir(projectDir);
  
  console.log('üìÅ Diret√≥rio atual:', process.cwd());
  
  // Verificar se o Node.js est√° funcionando
  console.log('üîß Verificando Node.js...');
  const nodeVersion = execSync('node --version', { encoding: 'utf8' });
  console.log('   ‚úÖ Node.js:', nodeVersion.trim());
  
  // Verificar se o npm est√° funcionando
  console.log('üì¶ Verificando npm...');
  const npmVersion = execSync('npm --version', { encoding: 'utf8' });
  console.log('   ‚úÖ npm:', npmVersion.trim());
  
  // Executar a implementa√ß√£o da FASE 1
  console.log('\nüîß INICIANDO FASE 1 - PPTX PROCESSING REAL');
  console.log('==========================================');
  
  // 1. Instalar depend√™ncias necess√°rias
  console.log('üì¶ Instalando PptxGenJS...');
  execSync('npm install pptxgenjs @types/pptxgenjs', { stdio: 'inherit' });
  
  // 2. Criar diret√≥rio para parser PPTX
  console.log('üìÅ Criando estrutura de diret√≥rios...');
  const fs = require('fs');
  const pptxDir = path.join(process.cwd(), 'app', 'lib', 'pptx');
  if (!fs.existsSync(pptxDir)) {
    fs.mkdirSync(pptxDir, { recursive: true });
  }
  
  console.log('‚úÖ FASE 1 - Prepara√ß√£o conclu√≠da!');
  console.log('\nüìä PR√ìXIMOS PASSOS:');
  console.log('   1. Parser PPTX real ser√° criado');
  console.log('   2. API routes ser√£o atualizadas');
  console.log('   3. Schema do banco ser√° atualizado');
  console.log('   4. Testes de valida√ß√£o ser√£o executados');
  console.log('   5. DocSync integrado: plano e resumo dispon√≠veis em _Fases_REAL');
  console.log('   6. SpecValidator + FeatureCoverage integrados: relat√≥rios em _Fases_REAL');
  
} catch (error) {
  console.error('‚ùå Erro na execu√ß√£o:', error.message);
  process.exit(1);
}