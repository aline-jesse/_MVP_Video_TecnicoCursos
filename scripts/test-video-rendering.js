/**
 * üé¨ TESTE DE FUNCIONALIDADE - RENDERIZA√á√ÉO DE V√çDEOS
 * Valida pipeline de renderiza√ß√£o com Remotion/FFmpeg
 */

import dotenv from 'dotenv'
import { promises as fs } from 'fs'
import path from 'path'
import { fileURLToPath } from 'url'
import { exec } from 'child_process'
import { promisify } from 'util'

const execAsync = promisify(exec)
const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)
const PROJECT_ROOT = __dirname

// Carrega vari√°veis de ambiente
dotenv.config({ path: path.join(PROJECT_ROOT, '.env') })

console.log('üé¨ INICIANDO TESTE DE RENDERIZA√á√ÉO DE V√çDEOS')
console.log('============================================================')

let successCount = 0
let totalTests = 6

async function checkFFmpegInstallation() {
  console.log('\n1Ô∏è‚É£ VERIFICANDO INSTALA√á√ÉO DO FFMPEG...')
  
  try {
    const { stdout } = await execAsync('ffmpeg -version')
    
    if (stdout.includes('ffmpeg version')) {
      console.log('  ‚úÖ FFmpeg instalado e funcionando')
      const version = stdout.split('\n')[0]
      console.log(`  üì¶ ${version}`)
      successCount++
    } else {
      console.log('  ‚ùå FFmpeg n√£o encontrado')
    }
    
  } catch (error) {
    console.log('  ‚ùå FFmpeg n√£o instalado ou n√£o acess√≠vel')
    console.log('  üí° Instale FFmpeg: https://ffmpeg.org/download.html')
  }
}

async function checkRemotionSetup() {
  console.log('\n2Ô∏è‚É£ VERIFICANDO CONFIGURA√á√ÉO REMOTION...')
  
  try {
    // Verifica package.json para depend√™ncias Remotion
    const packageJsonPath = path.join(PROJECT_ROOT, 'package.json')
    
    try {
      const packageContent = await fs.readFile(packageJsonPath, 'utf-8')
      const packageJson = JSON.parse(packageContent)
      
      const remotionDeps = [
        '@remotion/cli',
        '@remotion/renderer',
        '@remotion/bundler',
        '@remotion/player',
        'remotion'
      ]
      
      let remotionFound = 0
      
      for (const dep of remotionDeps) {
        if (packageJson.dependencies?.[dep] || packageJson.devDependencies?.[dep]) {
          console.log(`  ‚úÖ ${dep} encontrado`)
          remotionFound++
        }
      }
      
      if (remotionFound >= 2) {
        console.log('  ‚úÖ Remotion configurado no projeto')
        successCount++
      } else {
        console.log('  ‚ùå Remotion n√£o configurado adequadamente')
      }
      
    } catch {
      console.log('  ‚ùå package.json n√£o encontrado')
    }
    
    // Verifica arquivos de configura√ß√£o Remotion
    const remotionPaths = [
      path.join(PROJECT_ROOT, 'remotion.config.ts'),
      path.join(PROJECT_ROOT, 'remotion.config.js'),
      path.join(PROJECT_ROOT, 'estudio_ia_videos', 'remotion'),
      path.join(PROJECT_ROOT, 'src', 'remotion'),
      path.join(PROJECT_ROOT, 'app', 'remotion')
    ]
    
    for (const remotionPath of remotionPaths) {
      try {
        const stats = await fs.stat(remotionPath)
        if (stats.isFile() || stats.isDirectory()) {
          console.log(`  ‚úÖ Configura√ß√£o Remotion encontrada: ${path.relative(PROJECT_ROOT, remotionPath)}`)
          break
        }
      } catch {}
    }
    
  } catch (error) {
    console.log(`  ‚ùå Erro ao verificar Remotion: ${error.message}`)
  }
}

async function checkRenderAPIs() {
  console.log('\n3Ô∏è‚É£ VERIFICANDO APIs DE RENDERIZA√á√ÉO...')
  
  try {
    const apiPaths = [
      path.join(PROJECT_ROOT, 'app', 'api', 'render'),
      path.join(PROJECT_ROOT, 'app', 'api', 'v1', 'render'),
      path.join(PROJECT_ROOT, 'app', 'api', 'videos', 'render'),
      path.join(PROJECT_ROOT, 'api', 'render'),
      path.join(PROJECT_ROOT, 'pages', 'api', 'render')
    ]
    
    let apisFound = 0
    
    for (const apiPath of apiPaths) {
      try {
        const stats = await fs.stat(apiPath)
        if (stats.isDirectory()) {
          const files = await fs.readdir(apiPath)
          const routeFiles = files.filter(file => file.includes('route.'))
          
          if (routeFiles.length > 0) {
            console.log(`  ‚úÖ API de renderiza√ß√£o encontrada: ${path.relative(PROJECT_ROOT, apiPath)}`)
            console.log(`    üìÅ ${routeFiles.length} endpoints: ${routeFiles.join(', ')}`)
            apisFound++
          }
        }
      } catch {}
    }
    
    if (apisFound > 0) {
      successCount++
    } else {
      console.log('  ‚ùå Nenhuma API de renderiza√ß√£o encontrada')
    }
    
  } catch (error) {
    console.log(`  ‚ùå Erro ao verificar APIs: ${error.message}`)
  }
}

async function checkRenderQueue() {
  console.log('\n4Ô∏è‚É£ VERIFICANDO SISTEMA DE FILA DE RENDERIZA√á√ÉO...')
  
  try {
    const queuePaths = [
      path.join(PROJECT_ROOT, 'lib', 'render-queue'),
      path.join(PROJECT_ROOT, 'app', 'lib', 'render-queue'),
      path.join(PROJECT_ROOT, 'src', 'lib', 'render-queue'),
      path.join(PROJECT_ROOT, 'estudio_ia_videos', 'app', 'lib', 'render-queue-real.ts'),
      path.join(PROJECT_ROOT, 'workers', 'video-render-worker.ts')
    ]
    
    let queueFound = false
    
    for (const queuePath of queuePaths) {
      try {
        const stats = await fs.stat(queuePath)
        if (stats.isFile() || stats.isDirectory()) {
          console.log(`  ‚úÖ Sistema de fila encontrado: ${path.relative(PROJECT_ROOT, queuePath)}`)
          
          if (stats.isFile()) {
            const content = await fs.readFile(queuePath, 'utf-8')
            
            const hasBullMQ = content.includes('bullmq') || content.includes('Queue')
            const hasRedis = content.includes('redis') || content.includes('Redis')
            const hasVideoRender = content.includes('video-render') || content.includes('render')
            
            if (hasBullMQ) console.log('    ‚úÖ BullMQ integrado')
            if (hasRedis) console.log('    ‚úÖ Redis configurado')
            if (hasVideoRender) console.log('    ‚úÖ Processamento de v√≠deo implementado')
          }
          
          queueFound = true
          break
        }
      } catch {}
    }
    
    if (queueFound) {
      successCount++
    } else {
      console.log('  ‚ùå Sistema de fila n√£o encontrado')
    }
    
  } catch (error) {
    console.log(`  ‚ùå Erro ao verificar fila: ${error.message}`)
  }
}

async function checkVideoComponents() {
  console.log('\n5Ô∏è‚É£ VERIFICANDO COMPONENTES DE V√çDEO...')
  
  try {
    const componentPaths = [
      path.join(PROJECT_ROOT, 'src', 'components', 'video'),
      path.join(PROJECT_ROOT, 'components', 'video'),
      path.join(PROJECT_ROOT, 'app', 'components', 'video'),
      path.join(PROJECT_ROOT, 'estudio_ia_videos', 'components'),
      path.join(PROJECT_ROOT, 'app', 'lib', 'remotion')
    ]
    
    let componentsFound = 0
    
    for (const componentPath of componentPaths) {
      try {
        const stats = await fs.stat(componentPath)
        if (stats.isDirectory()) {
          const files = await fs.readdir(componentPath, { recursive: true })
          const videoFiles = files.filter(file => 
            (file.includes('video') || file.includes('render') || file.includes('remotion')) &&
            (file.endsWith('.tsx') || file.endsWith('.ts') || file.endsWith('.vue'))
          )
          
          if (videoFiles.length > 0) {
            console.log(`  ‚úÖ Componentes de v√≠deo encontrados em: ${path.relative(PROJECT_ROOT, componentPath)}`)
            console.log(`    üìÅ ${videoFiles.length} arquivos relacionados`)
            componentsFound++
          }
        }
      } catch {}
    }
    
    if (componentsFound > 0) {
      successCount++
    } else {
      console.log('  ‚ùå Nenhum componente de v√≠deo encontrado')
    }
    
  } catch (error) {
    console.log(`  ‚ùå Erro ao verificar componentes: ${error.message}`)
  }
}

async function checkVideoStorage() {
  console.log('\n6Ô∏è‚É£ VERIFICANDO ARMAZENAMENTO DE V√çDEOS...')
  
  try {
    // Verifica configura√ß√£o S3/Supabase Storage
    const envPath = path.join(PROJECT_ROOT, '.env')
    
    try {
      const envContent = await fs.readFile(envPath, 'utf-8')
      
      const hasS3 = envContent.includes('AWS_') || envContent.includes('S3_')
      const hasSupabase = envContent.includes('SUPABASE_') && envContent.includes('STORAGE')
      const hasCloudinary = envContent.includes('CLOUDINARY_')
      
      if (hasS3) {
        console.log('  ‚úÖ Configura√ß√£o AWS S3 encontrada')
        successCount++
      } else if (hasSupabase) {
        console.log('  ‚úÖ Configura√ß√£o Supabase Storage encontrada')
        successCount++
      } else if (hasCloudinary) {
        console.log('  ‚úÖ Configura√ß√£o Cloudinary encontrada')
        successCount++
      } else {
        console.log('  ‚ùå Nenhuma configura√ß√£o de storage encontrada')
      }
      
    } catch {
      console.log('  ‚ùå Arquivo .env n√£o encontrado')
    }
    
    // Verifica diret√≥rios de upload/output
    const outputPaths = [
      path.join(PROJECT_ROOT, 'uploads', 'videos'),
      path.join(PROJECT_ROOT, 'public', 'videos'),
      path.join(PROJECT_ROOT, 'tmp', 'renders'),
      path.join(PROJECT_ROOT, 'output'),
      path.join(PROJECT_ROOT, 'renders')
    ]
    
    for (const outputPath of outputPaths) {
      try {
        const stats = await fs.stat(outputPath)
        if (stats.isDirectory()) {
          console.log(`  ‚úÖ Diret√≥rio de output encontrado: ${path.relative(PROJECT_ROOT, outputPath)}`)
          break
        }
      } catch {}
    }
    
  } catch (error) {
    console.log(`  ‚ùå Erro ao verificar storage: ${error.message}`)
  }
}

// Executa todos os testes
async function runAllTests() {
  await checkFFmpegInstallation()
  await checkRemotionSetup()
  await checkRenderAPIs()
  await checkRenderQueue()
  await checkVideoComponents()
  await checkVideoStorage()
  
  // Relat√≥rio final
  console.log('\n============================================================')
  console.log('üìä RELAT√ìRIO FINAL - RENDERIZA√á√ÉO DE V√çDEOS')
  console.log('============================================================')
  
  const successRate = Math.round((successCount / totalTests) * 100)
  
  console.log(`\nüéØ TAXA DE SUCESSO: ${successRate}% (${successCount}/${totalTests})`)
  
  if (successRate >= 80) {
    console.log('üéâ RENDERIZA√á√ÉO DE V√çDEOS: OPERACIONAL')
  } else if (successRate >= 60) {
    console.log('‚ö†Ô∏è RENDERIZA√á√ÉO DE V√çDEOS: PARCIALMENTE OPERACIONAL')
  } else {
    console.log('‚ùå RENDERIZA√á√ÉO DE V√çDEOS: NECESSITA IMPLEMENTA√á√ÉO')
  }
  
  console.log('\nüìã PR√ìXIMOS PASSOS RECOMENDADOS:')
  
  if (successRate < 100) {
    if (successCount < 1) console.log('- Instalar FFmpeg no sistema')
    if (successCount < 2) console.log('- Configurar Remotion no projeto')
    if (successCount < 3) console.log('- Implementar APIs de renderiza√ß√£o')
    if (successCount < 4) console.log('- Configurar sistema de fila (BullMQ + Redis)')
    if (successCount < 5) console.log('- Criar componentes de interface para v√≠deos')
    if (successCount < 6) console.log('- Configurar storage para v√≠deos renderizados')
  } else {
    console.log('- Sistema de renderiza√ß√£o est√° completo!')
    console.log('- Teste renderiza√ß√£o de um v√≠deo simples')
    console.log('- Configure monitoramento de performance')
    console.log('- Implemente cache de renderiza√ß√£o')
  }
  
  process.exit(successRate >= 60 ? 0 : 1)
}

runAllTests().catch(console.error)