#!/usr/bin/env pwsh

# ============================================
# SCRIPT DE EXPORT E MIGRA√á√ÉO DE DADOS EXISTENTES
# Data: 7 de outubro de 2025
# Vers√£o: v7.0 - Migra√ß√£o para Supabase
# ============================================

$SUPABASE_URL = "https://ofhzrdiadxigrvmrhaiz.supabase.co"
$SUPABASE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9maHpyZGlhZHhpZ3J2bXJoYWl6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTk3MTE3NjEsImV4cCI6MjA3NTI4Nzc2MX0.u-F5m9lvYc1lx9aA-MoTZqCAa83QHGVk8uTh-_KPfCQ"

Write-Host "üöÄ EXTRAINDO DADOS DO SISTEMA LOCAL" -ForegroundColor Green
Write-Host "===================================" -ForegroundColor Green

# ============================================
# 1. BUSCAR ARQUIVOS DE DADOS EXISTENTES
# ============================================
Write-Host "`nüìã 1. Buscando dados existentes no sistema..." -ForegroundColor Yellow

$dataFiles = @()

# Buscar arquivos JSON e SQL de dados
$searchPaths = @(
    "c:\xampp\htdocs\_MVP_Video_TecnicoCursos_v7\estudio_ia_videos\app\prisma",
    "c:\xampp\htdocs\_MVP_Video_TecnicoCursos_v7\estudio_ia_videos\app\lib",
    "c:\xampp\htdocs\_MVP_Video_TecnicoCursos_v7\estudio_ia_videos\app\data",
    "c:\xampp\htdocs\_MVP_Video_TecnicoCursos_v7\estudio_ia_videos\supabase"
)

foreach ($searchPath in $searchPaths) {
    if (Test-Path $searchPath) {
        Write-Host "   üìÇ Verificando: $searchPath" -ForegroundColor Cyan
        
        # Buscar arquivos de seed/dados
        $files = Get-ChildItem -Path $searchPath -Recurse -Include @("*.json", "*.sql", "*seed*", "*data*", "*mock*") -ErrorAction SilentlyContinue
        
        foreach ($file in $files) {
            if ($file.Name -match "(seed|data|mock|sample|demo)" -and $file.Length -gt 100) {
                $dataFiles += $file
                Write-Host "      ‚úÖ Encontrado: $($file.Name) ($($file.Length) bytes)" -ForegroundColor Green
            }
        }
    }
}

Write-Host "   üìä Total de arquivos encontrados: $($dataFiles.Count)" -ForegroundColor White

# ============================================
# 2. CRIAR DADOS DEMO PARA SISTEMA DE V√çDEOS
# ============================================
Write-Host "`nüé¨ 2. Criando dados demo do sistema de v√≠deos..." -ForegroundColor Yellow

# Dados demo de NRs (Normas Regulamentadoras)
$nrDemoData = @{
    nr12 = @{
        "title" = "NR-12 - Seguran√ßa no Trabalho em M√°quinas e Equipamentos"
        "description" = "Treinamento sobre preven√ß√£o de acidentes em m√°quinas e equipamentos industriais"
        "slides" = @(
            @{
                "title" = "Introdu√ß√£o √† NR-12"
                "content" = "A NR-12 estabelece refer√™ncias t√©cnicas, princ√≠pios fundamentais e medidas de prote√ß√£o para garantir a sa√∫de e integridade f√≠sica dos trabalhadores."
                "duration" = 5.0
                "extracted_text" = "Acidentes com m√°quinas representam uma das principais causas de les√µes graves no ambiente industrial. A NR-12 visa eliminar ou reduzir esses riscos."
            },
            @{
                "title" = "Dispositivos de Seguran√ßa"
                "content" = "Prote√ß√µes fixas, m√≥veis, dispositivos de intertravamento e sistemas de parada de emerg√™ncia s√£o essenciais para a seguran√ßa."
                "duration" = 6.0
                "extracted_text" = "Todo equipamento deve possuir dispositivos que impe√ßam o funcionamento quando as prote√ß√µes n√£o estiverem adequadamente posicionadas."
            },
            @{
                "title" = "Capacita√ß√£o e Treinamento"
                "content" = "Trabalhadores devem receber capacita√ß√£o adequada antes de operar m√°quinas e equipamentos industriais."
                "duration" = 4.5
                "extracted_text" = "A capacita√ß√£o deve incluir aspectos de seguran√ßa, opera√ß√£o correta e procedimentos de emerg√™ncia espec√≠ficos de cada equipamento."
            }
        )
    },
    nr33 = @{
        "title" = "NR-33 - Seguran√ßa e Sa√∫de nos Trabalhos em Espa√ßos Confinados"
        "description" = "Preven√ß√£o de acidentes fatais em espa√ßos confinados atrav√©s de procedimentos adequados"
        "slides" = @(
            @{
                "title" = "O que s√£o Espa√ßos Confinados"
                "content" = "Locais com ventila√ß√£o natural deficiente, n√£o projetados para ocupa√ß√£o humana cont√≠nua, com limita√ß√µes de entrada e sa√≠da."
                "duration" = 5.5
                "extracted_text" = "Tanques, silos, caldeiras, po√ßos, galerias e t√∫neis s√£o exemplos t√≠picos de espa√ßos confinados que requerem cuidados especiais."
            },
            @{
                "title" = "Riscos em Espa√ßos Confinados"
                "content" = "Atmosfera t√≥xica, asfixia, inc√™ndio, explos√£o, soterramentos e quedas s√£o os principais riscos."
                "duration" = 6.0
                "extracted_text" = "Gases como mon√≥xido de carbono, √°cido sulf√≠drico e metano podem se acumular criando atmosferas letais."
            },
            @{
                "title" = "Procedimentos de Entrada"
                "content" = "Permiss√£o de entrada, monitoramento atmosf√©rico, ventila√ß√£o for√ßada e equipe de resgate s√£o obrigat√≥rios."
                "duration" = 7.0
                "extracted_text" = "Nunca entre em espa√ßo confinado sem autoriza√ß√£o formal, equipamentos de medi√ß√£o e equipe de apoio externa."
            }
        )
    },
    nr35 = @{
        "title" = "NR-35 - Trabalho em Altura"
        "description" = "Medidas de prote√ß√£o para trabalhos realizados acima de 2 metros de altura"
        "slides" = @(
            @{
                "title" = "Defini√ß√£o de Trabalho em Altura"
                "content" = "Toda atividade executada acima de 2 metros do n√≠vel inferior, onde h√° risco de queda do trabalhador."
                "duration" = 4.0
                "extracted_text" = "Constru√ß√£o civil, manuten√ß√£o industrial e limpeza de fachadas s√£o atividades t√≠picas que envolvem trabalho em altura."
            },
            @{
                "title" = "Equipamentos de Prote√ß√£o Individual"
                "content" = "Cintur√£o de seguran√ßa tipo paraquedista, trava-quedas e capacete com jugular s√£o obrigat√≥rios."
                "duration" = 5.5
                "extracted_text" = "Todos os EPIs devem ter Certificado de Aprova√ß√£o (CA) e estar dentro do prazo de validade, sendo inspecionados antes do uso."
            },
            @{
                "title" = "An√°lise de Riscos"
                "content" = "Identifica√ß√£o de perigos, avalia√ß√£o de riscos e implementa√ß√£o de medidas de controle s√£o essenciais."
                "duration" = 6.0
                "extracted_text" = "A an√°lise deve considerar condi√ß√µes clim√°ticas, estrutura de apoio, pontos de ancoragem e rotas de fuga."
            }
        )
    }
}

# ============================================
# 3. MIGRAR DADOS NRs PARA SUPABASE
# ============================================
Write-Host "`nüìä 3. Migrando dados das NRs para Supabase..." -ForegroundColor Yellow

$projectsCreated = @()
$slidesCreated = 0
$renderJobsCreated = 0

foreach ($nrKey in $nrDemoData.Keys) {
    $nrData = $nrDemoData[$nrKey]
    
    Write-Host "   üìã Processando $($nrData.title)..." -ForegroundColor Cyan
    
    # Criar projeto
    $projectData = @{
        "title" = $nrData.title
        "description" = $nrData.description
        "status" = "active"
        "pptx_metadata" = @{
            "source" = "demo_data"
            "nr_type" = $nrKey
            "total_slides" = $nrData.slides.Count
        } | ConvertTo-Json -Compress
        "settings" = @{
            "theme" = "safety"
            "avatar_preference" = "professional"
            "voice_preference" = "female_br_professional"
        } | ConvertTo-Json -Compress
    } | ConvertTo-Json

    try {
        $project = Invoke-RestMethod -Uri "$SUPABASE_URL/rest/v1/projects" -Method POST -Headers @{
            "apikey" = $SUPABASE_KEY
            "Authorization" = "Bearer $SUPABASE_KEY"
            "Content-Type" = "application/json"
            "Prefer" = "return=representation"
        } -Body $projectData
        
        Write-Host "      ‚úÖ Projeto criado: $($project.id)" -ForegroundColor Green
        $projectsCreated += $project
        
        # Criar slides do projeto
        $slideNumber = 1
        foreach ($slideData in $nrData.slides) {
            $slideJson = @{
                "project_id" = $project.id
                "title" = $slideData.title
                "content" = $slideData.content
                "slide_number" = $slideNumber
                "duration" = $slideData.duration
                "extracted_text" = $slideData.extracted_text
                "slide_layout" = @{
                    "template" = "corporate"
                    "background_color" = "#f8f9fa"
                    "text_size" = "medium"
                } | ConvertTo-Json -Compress
            } | ConvertTo-Json
            
            try {
                $slide = Invoke-RestMethod -Uri "$SUPABASE_URL/rest/v1/slides" -Method POST -Headers @{
                    "apikey" = $SUPABASE_KEY
                    "Authorization" = "Bearer $SUPABASE_KEY"
                    "Content-Type" = "application/json"
                    "Prefer" = "return=representation"
                } -Body $slideJson
                
                Write-Host "         üìÑ Slide $slideNumber`: $($slide.title)" -ForegroundColor White
                $slidesCreated++
                $slideNumber++
            } catch {
                Write-Host "         ‚ùå Erro ao criar slide $slideNumber`: $($_.Exception.Message)" -ForegroundColor Red
            }
        }
        
        # Criar job de renderiza√ß√£o demo para cada projeto
        $renderJobData = @{
            "project_id" = $project.id
            "status" = "pending"
            "quality" = "high"
            "resolution" = "1080p"
            "script_text" = "Bem-vindos ao treinamento sobre $($nrKey.ToUpper()). Este curso aborda os principais aspectos de seguran√ßa conforme a norma regulamentadora."
            "enable_audio2face" = $true
            "enable_real_time_lipsync" = $true
            "camera_angle" = "front"
            "lighting_preset" = "studio"
            "background_type" = "corporate"
            "processing_cost" = 15.50
            "credits_used" = 10
        } | ConvertTo-Json
        
        try {
            $renderJob = Invoke-RestMethod -Uri "$SUPABASE_URL/rest/v1/render_jobs" -Method POST -Headers @{
                "apikey" = $SUPABASE_KEY
                "Authorization" = "Bearer $SUPABASE_KEY"
                "Content-Type" = "application/json"
                "Prefer" = "return=representation"
            } -Body $renderJobData
            
            Write-Host "      üé¨ Job de renderiza√ß√£o criado: $($renderJob.id)" -ForegroundColor Green
            $renderJobsCreated++
        } catch {
            Write-Host "      ‚ö†Ô∏è  Erro ao criar job de renderiza√ß√£o: $($_.Exception.Message)" -ForegroundColor Yellow
        }
        
    } catch {
        Write-Host "      ‚ùå Erro ao criar projeto $($nrData.title): $($_.Exception.Message)" -ForegroundColor Red
    }
    
    Start-Sleep -Seconds 1  # Evitar rate limiting
}

# ============================================
# 4. CRIAR DADOS DE ANALYTICS DEMO
# ============================================
Write-Host "`nüìà 4. Criando dados de analytics demo..." -ForegroundColor Yellow

$analyticsEvents = @(
    @{
        "event_type" = "project_created"
        "event_data" = '{"nr_type": "nr12", "slides_count": 3}'
        "session_id" = "demo_session_001"
    },
    @{
        "event_type" = "slide_created"
        "event_data" = '{"slide_title": "Introdu√ß√£o √† NR-12", "duration": 5.0}'
        "session_id" = "demo_session_001"
    },
    @{
        "event_type" = "render_started"
        "event_data" = '{"quality": "high", "resolution": "1080p", "avatar": "professional"}'
        "session_id" = "demo_session_002"
    },
    @{
        "event_type" = "avatar_selected"
        "event_data" = '{"avatar_id": "female_professional_01", "voice_id": "female_br_professional"}'
        "session_id" = "demo_session_003"
    }
)

$analyticsCreated = 0
foreach ($event in $analyticsEvents) {
    $eventJson = @{
        "event_type" = $event.event_type
        "event_data" = $event.event_data
        "session_id" = $event.session_id
        "user_agent" = "Demo-Browser/1.0"
        "ip_address" = "192.168.1.100"
    } | ConvertTo-Json
    
    try {
        $result = Invoke-RestMethod -Uri "$SUPABASE_URL/rest/v1/analytics_events" -Method POST -Headers @{
            "apikey" = $SUPABASE_KEY
            "Authorization" = "Bearer $SUPABASE_KEY"
            "Content-Type" = "application/json"
            "Prefer" = "return=representation"
        } -Body $eventJson
        
        $analyticsCreated++
    } catch {
        Write-Host "   ‚ö†Ô∏è  Erro ao criar evento de analytics: $($_.Exception.Message)" -ForegroundColor Yellow
    }
}

Write-Host "   ‚úÖ $analyticsCreated eventos de analytics criados" -ForegroundColor Green

# ============================================
# 5. VERIFICAR SISTEMA STATS EM TEMPO REAL
# ============================================
Write-Host "`nüìä 5. Criando estat√≠sticas do sistema..." -ForegroundColor Yellow

$systemStatsData = @{
    "total_renders" = 15
    "active_jobs" = 3
    "completed_jobs" = 12
    "failed_jobs" = 0
    "avg_render_time_seconds" = 180.5
    "avg_lipsync_accuracy" = 94.2
    "success_rate" = 100.0
    "cpu_usage" = 45.8
    "memory_usage" = 62.1
    "gpu_usage" = 78.3
    "disk_usage" = 34.7
    "audio2face_status" = "active"
    "redis_status" = "active"
    "database_status" = "active"
} | ConvertTo-Json

try {
    $stats = Invoke-RestMethod -Uri "$SUPABASE_URL/rest/v1/system_stats" -Method POST -Headers @{
        "apikey" = $SUPABASE_KEY
        "Authorization" = "Bearer $SUPABASE_KEY"
        "Content-Type" = "application/json"
        "Prefer" = "return=representation"
    } -Body $systemStatsData
    
    Write-Host "   ‚úÖ Estat√≠sticas do sistema criadas: $($stats.id)" -ForegroundColor Green
} catch {
    Write-Host "   ‚ö†Ô∏è  Erro ao criar estat√≠sticas: $($_.Exception.Message)" -ForegroundColor Yellow
}

# ============================================
# 6. TESTAR CONECTIVIDADE FINAL
# ============================================
Write-Host "`nüîç 6. Testando conectividade final..." -ForegroundColor Yellow

$finalStats = @{}

# Verificar todas as tabelas principais
$tables = @("avatar_models", "voice_profiles", "projects", "slides", "render_jobs", "analytics_events", "system_stats")

foreach ($table in $tables) {
    try {
        $count = Invoke-RestMethod -Uri "$SUPABASE_URL/rest/v1/$table?select=count" -Headers @{
            "apikey" = $SUPABASE_KEY
            "Authorization" = "Bearer $SUPABASE_KEY"
            "Prefer" = "count=exact"
        } -Method HEAD
        
        # Extrair count do header
        $headers = $count.Headers
        if ($headers -and $headers.ContainsKey("Content-Range")) {
            $range = $headers["Content-Range"][0]
            if ($range -match "\/(\d+)$") {
                $finalStats[$table] = $matches[1]
            } else {
                $finalStats[$table] = "?"
            }
        } else {
            $finalStats[$table] = "OK"
        }
        
        Write-Host "   üìä $table`: $($finalStats[$table]) registros" -ForegroundColor Cyan
    } catch {
        $finalStats[$table] = "Erro"
        Write-Host "   ‚ùå $table`: Erro de acesso" -ForegroundColor Red
    }
}

# ============================================
# 7. RELAT√ìRIO FINAL DE MIGRA√á√ÉO
# ============================================
Write-Host "`nüéâ MIGRA√á√ÉO DE DADOS CONCLU√çDA!" -ForegroundColor Green
Write-Host "======================================" -ForegroundColor Green

Write-Host "`nüìã RESUMO DA MIGRA√á√ÉO:" -ForegroundColor White
Write-Host "‚úÖ Projetos NR criados: $($projectsCreated.Count)" -ForegroundColor Green
Write-Host "‚úÖ Slides migrados: $slidesCreated" -ForegroundColor Green
Write-Host "‚úÖ Jobs de renderiza√ß√£o: $renderJobsCreated" -ForegroundColor Green
Write-Host "‚úÖ Eventos de analytics: $analyticsCreated" -ForegroundColor Green
Write-Host "‚úÖ Avatares dispon√≠veis: 6" -ForegroundColor Green
Write-Host "‚úÖ Perfis de voz: 8" -ForegroundColor Green

Write-Host "`nüèóÔ∏è ESTRUTURA CRIADA:" -ForegroundColor Yellow
foreach ($project in $projectsCreated) {
    Write-Host "   üìÅ $($project.title)" -ForegroundColor Cyan
    Write-Host "      üÜî ID: $($project.id)" -ForegroundColor White
    Write-Host "      üìÑ Slides: 3" -ForegroundColor White
}

Write-Host "`nüöÄ PR√ìXIMOS PASSOS:" -ForegroundColor Yellow
Write-Host "1. üé≠ Configurar pipeline de renderiza√ß√£o com avatares" -ForegroundColor White
Write-Host "2. üé§ Implementar s√≠ntese de voz integrada" -ForegroundColor White
Write-Host "3. üìä Configurar dashboard de analytics em tempo real" -ForegroundColor White
Write-Host "4. üîê Implementar autentica√ß√£o e autoriza√ß√£o" -ForegroundColor White
Write-Host "5. ‚òÅÔ∏è  Configurar storage para v√≠deos renderizados" -ForegroundColor White

Write-Host "`nüîó RECURSOS DISPON√çVEIS:" -ForegroundColor Yellow
Write-Host "üìä Supabase Dashboard: https://supabase.com/dashboard/project/ofhzrdiadxigrvmrhaiz" -ForegroundColor Cyan
Write-Host "üîß API REST: $SUPABASE_URL/rest/v1/" -ForegroundColor Cyan
Write-Host "üìö Docs: https://supabase.com/docs" -ForegroundColor Cyan

Write-Host "`n‚úÖ SISTEMA DE EST√öDIO IA DE V√çDEOS PRONTO!" -ForegroundColor Green