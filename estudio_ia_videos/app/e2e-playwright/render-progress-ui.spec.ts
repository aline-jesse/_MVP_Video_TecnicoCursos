/**
 * üé≠ Playwright E2E Tests - Render Progress UI
 * 
 * Testa a interface de renderiza√ß√£o de v√≠deo:
 * 1. Iniciar renderiza√ß√£o
 * 2. Visualiza√ß√£o de progresso
 * 3. Barra de progresso em tempo real
 * 4. Download de v√≠deo finalizado
 * 5. Tratamento de erros
 */

import { test, expect } from '@playwright/test'

test.describe('Render Progress - Interface', () => {
  test.beforeEach(async ({ page }) => {
    // Navegar para a p√°gina de renderiza√ß√£o
    await page.goto('http://localhost:3000/render')
    await page.waitForLoadState('networkidle')
  })

  test('deve exibir op√ß√µes de renderiza√ß√£o', async ({ page }) => {
    // Verificar t√≠tulo
    await expect(page).toHaveTitle(/Render|Video/)
    
    // Procurar por op√ß√µes de qualidade
    const qualityOptions = page.locator('text=/low|medium|high|quality/i')
    const count = await qualityOptions.count()
    
    if (count > 0) {
      console.log(`‚úÖ ${count} op√ß√µes de qualidade encontradas`)
    } else {
      console.log('‚ö†Ô∏è Op√ß√µes de qualidade n√£o encontradas')
    }
  })

  test('deve permitir selecionar resolu√ß√£o', async ({ page }) => {
    // Procurar seletor de resolu√ß√£o
    const resolutionSelector = page.locator('[data-testid="resolution-select"]').or(page.locator('text=/1920x1080|1280x720|3840x2160/i'))
    const count = await resolutionSelector.count()
    
    if (count > 0) {
      console.log('‚úÖ Seletor de resolu√ß√£o dispon√≠vel')
    } else {
      console.log('‚ö†Ô∏è Seletor de resolu√ß√£o n√£o encontrado')
    }
  })

  test('deve permitir selecionar codec', async ({ page }) => {
    // Procurar op√ß√µes de codec
    const codecOptions = page.locator('text=/h264|h265|vp9|av1/i')
    const count = await codecOptions.count()
    
    if (count > 0) {
      console.log(`‚úÖ Op√ß√µes de codec encontradas`)
    } else {
      console.log('‚ö†Ô∏è Op√ß√µes de codec n√£o encontradas')
    }
  })

  test('deve permitir ativar/desativar watermark', async ({ page }) => {
    // Procurar checkbox de watermark
    const watermarkCheckbox = page.locator('[data-testid="watermark-toggle"]').or(page.locator('input[type="checkbox"]')).or(page.locator('text=/watermark/i'))
    const count = await watermarkCheckbox.count()
    
    if (count > 0) {
      console.log('‚úÖ Op√ß√£o de watermark dispon√≠vel')
    } else {
      console.log('‚ö†Ô∏è Op√ß√£o de watermark n√£o encontrada')
    }
  })

  test('deve iniciar renderiza√ß√£o', async ({ page }) => {
    // Bot√£o de iniciar render
    const startButton = page.locator('button:has-text("Start Render")').or(page.locator('button:has-text("Render")'))
    const hasButton = await startButton.count()
    
    if (hasButton > 0) {
      await startButton.first().click()
      await page.waitForTimeout(1000)
      
      // Verificar que renderiza√ß√£o come√ßou
      const progressIndicator = page.locator('[data-testid="render-progress"]').or(page.locator('.progress-bar')).or(page.locator('text=/processing|rendering/i'))
      const hasProgress = await progressIndicator.count()
      
      if (hasProgress > 0) {
        console.log('‚úÖ Renderiza√ß√£o iniciada com sucesso')
      }
    } else {
      console.log('‚ö†Ô∏è Bot√£o de render n√£o encontrado')
    }
  })

  test('deve exibir barra de progresso', async ({ page }) => {
    // Este teste assume que h√° uma renderiza√ß√£o em andamento
    const progressBar = page.locator('[data-testid="progress-bar"]').or(page.locator('progress')).or(page.locator('.progress-bar'))
    const count = await progressBar.count()
    
    if (count > 0) {
      // Verificar valor do progresso
      const progress = progressBar.first()
      const value = await progress.getAttribute('value').catch(() => null)
      
      if (value) {
        console.log(`‚úÖ Progresso: ${value}%`)
      } else {
        console.log('‚úÖ Barra de progresso exibida')
      }
    } else {
      console.log('‚ö†Ô∏è Barra de progresso n√£o encontrada')
    }
  })

  test('deve exibir porcentagem de progresso', async ({ page }) => {
    // Procurar por n√∫mero de porcentagem
    const percentage = page.locator('text=/\\d+%/')
    const count = await percentage.count()
    
    if (count > 0) {
      const percentText = await percentage.first().textContent()
      console.log(`‚úÖ Porcentagem exibida: ${percentText}`)
    } else {
      console.log('‚ö†Ô∏è Porcentagem n√£o encontrada - pode n√£o haver renderiza√ß√£o em andamento')
    }
  })

  test('deve exibir tempo estimado', async ({ page }) => {
    // Procurar por tempo estimado
    const timeEstimate = page.locator('text=/ETA|estimated|remaining/i')
    const count = await timeEstimate.count()
    
    if (count > 0) {
      const timeText = await timeEstimate.first().textContent()
      console.log(`‚úÖ Tempo estimado exibido: ${timeText}`)
    } else {
      console.log('‚ö†Ô∏è Tempo estimado n√£o encontrado')
    }
  })

  test('deve atualizar progresso em tempo real', async ({ page }) => {
    // Este teste requer uma renderiza√ß√£o em andamento
    const progressBar = page.locator('[data-testid="progress-bar"]').or(page.locator('progress'))
    const hasProgress = await progressBar.count()
    
    if (hasProgress > 0) {
      // Capturar valor inicial
      const initialValue = await progressBar.first().getAttribute('value').catch(() => '0')
      
      // Aguardar 5 segundos
      await page.waitForTimeout(5000)
      
      // Capturar novo valor
      const newValue = await progressBar.first().getAttribute('value').catch(() => '0')
      
      if (newValue !== initialValue) {
        console.log(`‚úÖ Progresso atualizado: ${initialValue}% ‚Üí ${newValue}%`)
      } else {
        console.log('‚ö†Ô∏è Progresso n√£o mudou (pode ser renderiza√ß√£o r√°pida ou n√£o iniciada)')
      }
    }
  })

  test('deve exibir mensagem de conclus√£o', async ({ page }) => {
    // Procurar por mensagem de sucesso
    const successMessage = page.locator('[data-testid="render-complete"]').or(page.locator('text=/completed|success|finalizado/i'))
    const count = await successMessage.count()
    
    if (count > 0) {
      console.log('‚úÖ Mensagem de conclus√£o exibida')
    } else {
      console.log('‚ö†Ô∏è Mensagem n√£o encontrada - pode n√£o haver renderiza√ß√£o completa')
    }
  })

  test('deve permitir download do v√≠deo', async ({ page }) => {
    // Este teste assume que h√° uma renderiza√ß√£o completa
    const downloadButton = page.locator('button:has-text("Download")').or(page.locator('a[download]'))
    const hasButton = await downloadButton.count()
    
    if (hasButton > 0) {
      // Configurar listener para download
      const downloadPromise = page.waitForEvent('download', { timeout: 5000 }).catch(() => null)
      
      await downloadButton.first().click()
      
      const download = await downloadPromise
      
      if (download) {
        const filename = await download.suggestedFilename()
        console.log(`‚úÖ V√≠deo pronto para download: ${filename}`)
      } else {
        console.log('‚ö†Ô∏è Download n√£o iniciado')
      }
    } else {
      console.log('‚ö†Ô∏è Bot√£o de download n√£o encontrado - pode n√£o haver v√≠deos prontos')
    }
  })

  test('deve exibir lista de renders em fila', async ({ page }) => {
    // Procurar por lista de jobs
    const renderQueue = page.locator('[data-testid="render-queue"]').or(page.locator('.render-list'))
    const hasQueue = await renderQueue.count()
    
    if (hasQueue > 0) {
      // Contar items na fila
      const items = page.locator('[data-testid="render-item"]').or(page.locator('.render-item'))
      const count = await items.count()
      
      console.log(`‚úÖ ${count} renders na fila`)
    } else {
      console.log('‚ö†Ô∏è Lista de renders n√£o encontrada')
    }
  })

  test('deve exibir status de cada render', async ({ page }) => {
    // Procurar por badges de status
    const statusBadges = page.locator('[data-testid="render-status"]').or(page.locator('text=/pending|processing|completed|failed/i'))
    const count = await statusBadges.count()
    
    if (count > 0) {
      console.log(`‚úÖ ${count} status de render exibidos`)
    } else {
      console.log('‚ö†Ô∏è Status n√£o encontrados')
    }
  })

  test('deve permitir cancelar renderiza√ß√£o', async ({ page }) => {
    // Procurar bot√£o de cancelar
    const cancelButton = page.locator('button:has-text("Cancel")').or(page.locator('[data-testid="cancel-render"]'))
    const hasButton = await cancelButton.count()
    
    if (hasButton > 0) {
      console.log('‚úÖ Op√ß√£o de cancelar dispon√≠vel')
    } else {
      console.log('‚ö†Ô∏è Bot√£o de cancelar n√£o encontrado')
    }
  })

  test('deve exibir mensagem de erro se falhar', async ({ page }) => {
    // Este teste procura por mensagens de erro
    const errorMessage = page.locator('[data-testid="render-error"]').or(page.locator('.error')).or(page.locator('text=/error|failed|falha/i'))
    const count = await errorMessage.count()
    
    if (count > 0) {
      const errorText = await errorMessage.first().textContent()
      console.log(`‚ö†Ô∏è Erro encontrado: ${errorText}`)
    } else {
      console.log('‚úÖ Nenhum erro detectado')
    }
  })

  test('deve persistir estado ao recarregar p√°gina', async ({ page }) => {
    // Este teste verifica se o estado persiste
    const hasRenders = await page.locator('[data-testid="render-item"]').count()
    
    if (hasRenders > 0) {
      const initialCount = hasRenders
      
      // Recarregar p√°gina
      await page.reload()
      await page.waitForLoadState('networkidle')
      
      // Verificar se renders ainda est√£o l√°
      const newCount = await page.locator('[data-testid="render-item"]').count()
      
      if (newCount === initialCount) {
        console.log('‚úÖ Estado persistiu ap√≥s reload')
      } else {
        console.log(`‚ö†Ô∏è Estado mudou: ${initialCount} ‚Üí ${newCount}`)
      }
    }
  })
})

