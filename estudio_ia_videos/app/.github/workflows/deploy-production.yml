name: 🚀 Deploy to Production

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  NODE_VERSION: '18'

jobs:
  # ==========================================
  # JOB 1: LINT & TYPE CHECK
  # ==========================================
  lint:
    name: 🔍 Lint & Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 📥 Install dependencies
        run: npm ci
      
      - name: 🔍 Run ESLint
        run: npm run lint
      
      - name: 🔍 Type check
        run: npx tsc --noEmit

  # ==========================================
  # JOB 2: UNIT TESTS
  # ==========================================
  test-unit:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 📥 Install dependencies
        run: npm ci
      
      - name: 🧪 Run unit tests
        run: npm test
      
      - name: 📊 Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/coverage-final.json
          flags: unittests

  # ==========================================
  # JOB 3: E2E TESTS (API)
  # ==========================================
  test-e2e:
    name: 🧪 E2E Tests (API)
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 📥 Install dependencies
        run: npm ci
      
      - name: 🗄️ Setup database
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db
        run: |
          npx prisma migrate deploy
          npx prisma db seed
      
      - name: 🧪 Run E2E tests
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db
          REDIS_HOST: localhost
          REDIS_PORT: 6379
        run: npm run test:e2e

  # ==========================================
  # JOB 4: PLAYWRIGHT TESTS (UI)
  # ==========================================
  test-playwright:
    name: 🎭 Playwright Tests (UI)
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 📥 Install dependencies
        run: npm ci
      
      - name: 🎭 Install Playwright browsers
        run: npx playwright install --with-deps
      
      - name: 🗄️ Setup database
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db
        run: |
          npx prisma migrate deploy
          npx prisma db seed
      
      - name: 🎭 Run Playwright tests
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db
          BASE_URL: http://localhost:3000
        run: npm run test:playwright
      
      - name: 📸 Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: qa/artifacts/
          retention-days: 30

  # ==========================================
  # JOB 5: BUILD
  # ==========================================
  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest
    needs: [lint, test-unit, test-e2e, test-playwright]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 📥 Install dependencies
        run: npm ci
      
      - name: 🔨 Generate Prisma Client
        run: npx prisma generate
      
      - name: 🏗️ Build application
        run: npm run build
      
      - name: 📦 Upload build
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: .next/
          retention-days: 7

  # ==========================================
  # JOB 6: DEPLOY TO VERCEL (Production)
  # ==========================================
  deploy-vercel:
    name: 🚀 Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3
      
      - name: 🚀 Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./
      
      - name: 📝 Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ Deploy successful! Preview: https://your-preview-url.vercel.app'
            })

  # ==========================================
  # JOB 7: SMOKE TESTS (Post-Deploy)
  # ==========================================
  smoke-tests:
    name: 🔥 Smoke Tests
    runs-on: ubuntu-latest
    needs: [deploy-vercel]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3
      
      - name: 🔥 Run smoke tests
        run: |
          echo "🔥 Running smoke tests..."
          
          # Health check
          curl -f https://seudominio.com/api/health || exit 1
          echo "✅ Health check passed"
          
          # Projects API
          curl -f https://seudominio.com/api/projects || exit 1
          echo "✅ Projects API OK"
          
          # Analytics
          curl -f https://seudominio.com/api/analytics/dashboard || exit 1
          echo "✅ Analytics OK"
          
          echo "🎉 All smoke tests passed!"
      
      - name: 📢 Notify success
        if: success()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: 'success',
              description: 'Deploy successful + smoke tests passed',
              context: 'Production Deploy'
            })
      
      - name: 🚨 Notify failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: 'failure',
              description: 'Smoke tests failed - check logs',
              context: 'Production Deploy'
            })

  # ==========================================
  # JOB 8: NOTIFY (Slack/Discord)
  # ==========================================
  notify:
    name: 📢 Notify Team
    runs-on: ubuntu-latest
    needs: [smoke-tests]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
      - name: 📢 Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            🚀 Deploy to Production ${{ job.status }}
            
            Commit: ${{ github.event.head_commit.message }}
            Author: ${{ github.actor }}
            
            Tests:
            - Unit: ✅
            - E2E: ✅
            - UI: ✅
            - Smoke: ${{ needs.smoke-tests.result }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

