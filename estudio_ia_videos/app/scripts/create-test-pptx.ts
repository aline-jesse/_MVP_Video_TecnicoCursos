#!/usr/bin/env tsx

/**
 * Script para criar um arquivo PPTX de teste v√°lido
 * FASE 1: PPTX Processing Real
 */

import PptxGenJS from 'pptxgenjs'
import fs from 'fs'
import path from 'path'

async function createTestPPTX() {
  console.log('üéØ Criando arquivo PPTX de teste...')

  try {
    // Criar nova apresenta√ß√£o
    const pptx = new PptxGenJS()

    // Configurar propriedades da apresenta√ß√£o
    pptx.author = 'Sistema de Teste'
    pptx.company = 'Estudio IA Videos'
    pptx.title = 'Apresenta√ß√£o de Teste - PPTX Processing'
    pptx.subject = 'Teste de processamento real de PPTX'

    // Slide 1: T√≠tulo
    const slide1 = pptx.addSlide()
    slide1.addText('Apresenta√ß√£o de Teste', {
      x: 1,
      y: 1,
      w: 8,
      h: 1.5,
      fontSize: 44,
      bold: true,
      color: '363636',
      align: 'center'
    })
    slide1.addText('PPTX Processing Real - Fase 1', {
      x: 1,
      y: 3,
      w: 8,
      h: 1,
      fontSize: 24,
      color: '666666',
      align: 'center'
    })
    slide1.addText('Sistema de processamento de apresenta√ß√µes PowerPoint', {
      x: 1,
      y: 4.5,
      w: 8,
      h: 0.8,
      fontSize: 16,
      color: '888888',
      align: 'center'
    })

    // Slide 2: Lista com bullets
    const slide2 = pptx.addSlide()
    slide2.addText('Funcionalidades Implementadas', {
      x: 0.5,
      y: 0.5,
      w: 9,
      h: 1,
      fontSize: 32,
      bold: true,
      color: '363636'
    })
    
    const bulletPoints = [
      'Extra√ß√£o real de texto e formata√ß√£o',
      'Processamento de imagens e assets',
      'Detec√ß√£o autom√°tica de layouts',
      'Gera√ß√£o de timeline de apresenta√ß√£o',
      'Upload para S3 com thumbnails',
      'Integra√ß√£o com banco de dados Prisma'
    ]

    bulletPoints.forEach((point, index) => {
      slide2.addText(`‚Ä¢ ${point}`, {
        x: 1,
        y: 2 + (index * 0.6),
        w: 8,
        h: 0.5,
        fontSize: 18,
        color: '444444'
      })
    })

    // Slide 3: Dados t√©cnicos
    const slide3 = pptx.addSlide()
    slide3.addText('Especifica√ß√µes T√©cnicas', {
      x: 0.5,
      y: 0.5,
      w: 9,
      h: 1,
      fontSize: 32,
      bold: true,
      color: '363636'
    })

    slide3.addText('Tecnologias Utilizadas:', {
      x: 1,
      y: 2,
      w: 4,
      h: 0.5,
      fontSize: 20,
      bold: true,
      color: '555555'
    })

    const techList = [
      'Next.js + TypeScript',
      'Prisma ORM',
      'AWS S3 Storage',
      'Sharp (processamento de imagens)',
      'JSZip (manipula√ß√£o de arquivos)',
      'XML2JS (parsing de XML)'
    ]

    techList.forEach((tech, index) => {
      slide3.addText(`‚Üí ${tech}`, {
        x: 1.5,
        y: 2.8 + (index * 0.4),
        w: 6,
        h: 0.3,
        fontSize: 14,
        color: '666666'
      })
    })

    // Slide 4: Estat√≠sticas
    const slide4 = pptx.addSlide()
    slide4.addText('M√©tricas de Performance', {
      x: 0.5,
      y: 0.5,
      w: 9,
      h: 1,
      fontSize: 32,
      bold: true,
      color: '363636'
    })

    // Adicionar tabela com m√©tricas
    const tableData = [
      ['M√©trica', 'Valor', 'Unidade'],
      ['Tempo de processamento', '< 5', 'segundos'],
      ['Slides suportados', '100+', 'slides'],
      ['Formatos de imagem', '7', 'tipos'],
      ['Tamanho m√°ximo', '50', 'MB'],
      ['Precis√£o de extra√ß√£o', '95%', 'texto']
    ]

    slide4.addTable(tableData, {
      x: 1,
      y: 2,
      w: 8,
      h: 3,
      fontSize: 14,
      border: { pt: 1, color: 'CCCCCC' },
      fill: { color: 'F8F9FA' }
    })

    // Slide 5: Notas do apresentador
    const slide5 = pptx.addSlide()
    slide5.addText('Conclus√£o', {
      x: 0.5,
      y: 0.5,
      w: 9,
      h: 1,
      fontSize: 32,
      bold: true,
      color: '363636'
    })

    slide5.addText('O sistema de processamento PPTX real foi implementado com sucesso, oferecendo extra√ß√£o completa de conte√∫do, processamento de imagens e integra√ß√£o com servi√ßos de nuvem.', {
      x: 1,
      y: 2,
      w: 8,
      h: 2,
      fontSize: 18,
      color: '444444',
      align: 'justify'
    })

    slide5.addText('Pr√≥ximos passos: otimiza√ß√£o de performance e suporte a elementos avan√ßados.', {
      x: 1,
      y: 4.5,
      w: 8,
      h: 1,
      fontSize: 16,
      color: '666666',
      italic: true
    })

    // Adicionar notas do apresentador
    slide5.addNotes('Esta apresenta√ß√£o demonstra as capacidades do sistema de processamento PPTX real. O sistema √© capaz de extrair texto, imagens, layouts e metadados de apresenta√ß√µes PowerPoint de forma automatizada.')

    // Salvar arquivo
    const outputPath = path.join(process.cwd(), '..', 'test-presentation.pptx')
    
    console.log('üíæ Salvando apresenta√ß√£o...')
    await pptx.writeFile({ fileName: outputPath })
    
    // Verificar se o arquivo foi criado
    if (fs.existsSync(outputPath)) {
      const stats = fs.statSync(outputPath)
      console.log(`‚úÖ Arquivo PPTX criado com sucesso!`)
      console.log(`üìÅ Localiza√ß√£o: ${outputPath}`)
      console.log(`üìä Tamanho: ${(stats.size / 1024).toFixed(2)} KB`)
      console.log(`üìÑ Slides: 5`)
      console.log(`üéØ Pronto para teste de processamento!`)
    } else {
      throw new Error('Arquivo n√£o foi criado')
    }

  } catch (error) {
    console.error('‚ùå Erro ao criar PPTX de teste:', error)
    process.exit(1)
  }
}

// Executar cria√ß√£o
if (require.main === module) {
  createTestPPTX()
    .then(() => {
      console.log('\nüéâ Arquivo PPTX de teste criado com sucesso!')
      process.exit(0)
    })
    .catch((error) => {
      console.error('\n‚ùå Erro na cria√ß√£o:', error)
      process.exit(1)
    })
}

export { createTestPPTX }