/**
 * üìÑ API PPTX Generate - Gera√ß√£o de Apresenta√ß√µes
 * Cria√ß√£o automatizada de PPTX a partir de dados
 */

import { NextRequest, NextResponse } from 'next/server';
import { PPTXGenerator, PPTXGenerationOptions } from '@/lib/pptx/pptx-generator';

/**
 * POST - Gerar apresenta√ß√£o PPTX
 */
export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { type, data, options } = body;

    if (!type || !data) {
      return NextResponse.json(
        { error: 'Tipo e dados s√£o obrigat√≥rios' },
        { status: 400 }
      );
    }

    console.log(`[PPTX Generate API] Generating presentation type: ${type}`);

    const generationOptions: PPTXGenerationOptions = options || {};
    const generator = new PPTXGenerator(generationOptions);

    let buffer: Buffer;

    switch (type) {
      case 'from-data':
        buffer = await generator.generateFromData(data);
        break;
      
      case 'from-template':
        if (!data.templateId || !data.variables) {
          return NextResponse.json(
            { error: 'Template ID e vari√°veis s√£o obrigat√≥rios' },
            { status: 400 }
          );
        }
        buffer = await generator.generateFromTemplate(data.templateId, data.variables);
        break;
      
      case 'training-course':
        buffer = await generateTrainingCourse(generator, data);
        break;
      
      case 'safety-presentation':
        buffer = await generateSafetyPresentation(generator, data);
        break;
      
      case 'quick-slides':
        buffer = await generateQuickSlides(generator, data);
        break;
      
      default:
        return NextResponse.json(
          { error: `Tipo de gera√ß√£o n√£o suportado: ${type}` },
          { status: 400 }
        );
    }

    // Configurar resposta para download
    const headers = new Headers();
    headers.set('Content-Type', 'application/vnd.openxmlformats-officedocument.presentationml.presentation');
    headers.set('Content-Disposition', `attachment; filename="${data.title || 'apresentacao'}.pptx"`);
    headers.set('Content-Length', buffer.length.toString());

    console.log(`[PPTX Generate API] Generated presentation successfully (${buffer.length} bytes)`);

    return new NextResponse(buffer, {
      status: 200,
      headers
    });

  } catch (error) {
    console.error('[PPTX Generate API] Generation error:', error);
    return NextResponse.json(
      { error: 'Erro na gera√ß√£o da apresenta√ß√£o', details: error.message },
      { status: 500 }
    );
  }
}

/**
 * Gerar curso de treinamento
 */
async function generateTrainingCourse(generator: PPTXGenerator, data: any): Promise<Buffer> {
  const courseData = {
    title: data.title || 'Curso de Treinamento',
    slides: [
      // Slide de t√≠tulo
      {
        type: 'title',
        title: data.title || 'Curso de Treinamento',
        subtitle: data.subtitle || 'Treinamento Corporativo',
        notes: 'Slide de abertura do curso'
      },
      
      // Objetivos
      {
        type: 'content',
        title: 'Objetivos do Treinamento',
        content: data.objectives || [
          'Compreender os conceitos fundamentais',
          'Aplicar as melhores pr√°ticas',
          'Desenvolver habilidades pr√°ticas',
          'Certificar conhecimentos adquiridos'
        ],
        notes: 'Definir claramente os objetivos de aprendizagem'
      },
      
      // Conte√∫do principal
      ...(data.modules || []).map((module: any, index: number) => ({
        type: 'content',
        title: `M√≥dulo ${index + 1}: ${module.title}`,
        content: module.topics || [],
        notes: module.notes || `Conte√∫do do m√≥dulo ${index + 1}`
      })),
      
      // Slide de conclus√£o
      {
        type: 'content',
        title: 'Conclus√£o',
        content: [
          'Principais pontos abordados',
          'Aplica√ß√£o pr√°tica',
          'Pr√≥ximos passos',
          'Recursos adicionais'
        ],
        notes: 'Resumir os pontos principais e orientar pr√≥ximos passos'
      }
    ]
  };

  return await generator.generateFromData(courseData);
}

/**
 * Gerar apresenta√ß√£o de seguran√ßa
 */
async function generateSafetyPresentation(generator: PPTXGenerator, data: any): Promise<Buffer> {
  const safetyData = {
    title: data.title || 'Treinamento de Seguran√ßa do Trabalho',
    slides: [
      // T√≠tulo
      {
        type: 'title',
        title: data.title || 'Seguran√ßa do Trabalho',
        subtitle: 'Preven√ß√£o de Acidentes e Prote√ß√£o da Vida',
        notes: 'Apresenta√ß√£o focada em seguran√ßa ocupacional'
      },
      
      // Import√¢ncia da seguran√ßa
      {
        type: 'content',
        title: 'Por que a Seguran√ßa √© Importante?',
        content: [
          'Preserva√ß√£o da vida e integridade f√≠sica',
          'Redu√ß√£o de custos com acidentes',
          'Cumprimento de normas regulamentadoras',
          'Melhoria do ambiente de trabalho',
          'Responsabilidade social da empresa'
        ],
        notes: 'Estabelecer a import√¢ncia fundamental da seguran√ßa'
      },
      
      // Principais riscos
      {
        type: 'content',
        title: 'Principais Riscos no Ambiente de Trabalho',
        content: data.risks || [
          'Riscos f√≠sicos (ru√≠do, calor, frio)',
          'Riscos qu√≠micos (gases, vapores, poeiras)',
          'Riscos biol√≥gicos (v√≠rus, bact√©rias)',
          'Riscos ergon√¥micos (postura, repetitividade)',
          'Riscos de acidentes (m√°quinas, ferramentas)'
        ],
        notes: 'Identificar os principais tipos de riscos ocupacionais'
      },
      
      // EPIs
      {
        type: 'content',
        title: 'Equipamentos de Prote√ß√£o Individual (EPIs)',
        content: [
          'Capacete de seguran√ßa',
          '√ìculos de prote√ß√£o',
          'Protetores auriculares',
          'M√°scaras e respiradores',
          'Luvas de prote√ß√£o',
          'Cal√ßados de seguran√ßa',
          'Cintos de seguran√ßa'
        ],
        notes: 'Apresentar os principais EPIs e suas aplica√ß√µes'
      },
      
      // Procedimentos de emerg√™ncia
      {
        type: 'content',
        title: 'Procedimentos de Emerg√™ncia',
        content: [
          'Identifica√ß√£o de situa√ß√µes de emerg√™ncia',
          'Rotas de fuga e pontos de encontro',
          'Uso de extintores e mangueiras',
          'Primeiros socorros b√°sicos',
          'Comunica√ß√£o de emerg√™ncias',
          'Evacua√ß√£o ordenada'
        ],
        notes: 'Definir procedimentos claros para situa√ß√µes de emerg√™ncia'
      },
      
      // Responsabilidades
      {
        type: 'comparison',
        title: 'Responsabilidades na Seguran√ßa',
        leftColumn: {
          title: 'Empresa',
          content: [
            'Fornecer EPIs adequados',
            'Treinar funcion√°rios',
            'Manter ambiente seguro',
            'Cumprir normas legais',
            'Investigar acidentes'
          ]
        },
        rightColumn: {
          title: 'Funcion√°rio',
          content: [
            'Usar EPIs corretamente',
            'Seguir procedimentos',
            'Reportar riscos',
            'Participar de treinamentos',
            'Cuidar da pr√≥pria seguran√ßa'
          ]
        },
        notes: 'Esclarecer as responsabilidades de cada parte'
      },
      
      // Conclus√£o
      {
        type: 'content',
        title: 'Compromisso com a Seguran√ßa',
        content: [
          'Seguran√ßa √© responsabilidade de todos',
          'Preven√ß√£o √© sempre melhor que corre√ß√£o',
          'Reportar situa√ß√µes de risco',
          'Participar ativamente dos treinamentos',
          'Cuidar de si e dos colegas'
        ],
        notes: 'Refor√ßar o compromisso coletivo com a seguran√ßa'
      }
    ]
  };

  return await generator.generateFromData(safetyData as any);
}

/**
 * Gerar slides r√°pidos
 */
async function generateQuickSlides(generator: PPTXGenerator, data: any): Promise<Buffer> {
  const quickData = {
    title: data.title || 'Apresenta√ß√£o R√°pida',
    slides: data.slides.map((slide: any, index: number) => ({
      type: slide.type || 'content',
      title: slide.title || `Slide ${index + 1}`,
      content: slide.content || '',
      image: slide.image,
      notes: slide.notes
    }))
  };

  return await generator.generateFromData(quickData);
}

/**
 * GET - Obter templates dispon√≠veis
 */
export async function GET(request: NextRequest) {
  try {
    const templates = [
      {
        id: 'training-course',
        name: 'Curso de Treinamento',
        description: 'Template para cursos corporativos com m√≥dulos estruturados',
        category: 'Educa√ß√£o',
        variables: [
          { name: 'title', type: 'text', required: true, description: 'T√≠tulo do curso' },
          { name: 'subtitle', type: 'text', required: false, description: 'Subt√≠tulo opcional' },
          { name: 'objectives', type: 'list', required: false, description: 'Lista de objetivos' },
          { name: 'modules', type: 'list', required: true, description: 'M√≥dulos do curso' }
        ]
      },
      {
        id: 'safety-presentation',
        name: 'Seguran√ßa do Trabalho',
        description: 'Apresenta√ß√£o completa sobre seguran√ßa ocupacional',
        category: 'Seguran√ßa',
        variables: [
          { name: 'title', type: 'text', required: false, description: 'T√≠tulo personalizado' },
          { name: 'risks', type: 'list', required: false, description: 'Riscos espec√≠ficos' }
        ]
      },
      {
        id: 'quick-slides',
        name: 'Slides R√°pidos',
        description: 'Gera√ß√£o r√°pida de slides com conte√∫do personalizado',
        category: 'Geral',
        variables: [
          { name: 'title', type: 'text', required: true, description: 'T√≠tulo da apresenta√ß√£o' },
          { name: 'slides', type: 'list', required: true, description: 'Lista de slides' }
        ]
      }
    ];

    return NextResponse.json({ templates });

  } catch (error) {
    console.error('[PPTX Generate API] Template list error:', error);
    return NextResponse.json(
      { error: 'Erro ao obter templates' },
      { status: 500 }
    );
  }
}