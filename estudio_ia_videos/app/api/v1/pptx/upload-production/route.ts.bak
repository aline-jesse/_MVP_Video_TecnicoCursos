
/**
 * Production PPTX Upload API - Real Implementation
 * Handles S3 upload and initiates processing pipeline
 */

import { NextRequest, NextResponse } from 'next/server'
import { uploadToS3 } from '@/lib/aws-s3-config'
import { processPPTXFile } from '@/lib/pptx-processor-real'

export const runtime = 'nodejs'
export const maxDuration = 60 // 60 seconds for processing

export async function POST(request: NextRequest) {
  try {
    const formData = await request.formData()
    const file = formData.get('file') as File

    if (!file) {
      return NextResponse.json(
        { success: false, error: 'Nenhum arquivo enviado' },
        { status: 400 }
      )
    }

    console.log('Processing upload:', {
      name: file.name,
      size: file.size,
      type: file.type
    })

    // Step 1: Upload to S3
    const uploadResult = await uploadToS3(file)
    
    if (!uploadResult.success) {
      return NextResponse.json(
        { success: false, error: uploadResult.error },
        { status: 500 }
      )
    }

    // Step 2: Process PPTX content
    const processingResult = await processPPTXFile(file)
    
    if (!processingResult.success) {
      return NextResponse.json({
        success: false,
        error: processingResult.error,
        uploadResult // Return upload info even if processing failed
      }, { status: 500 })
    }

    // Success response
    return NextResponse.json({
      success: true,
      upload: uploadResult,
      processing: processingResult,
      message: `Arquivo processado com sucesso! ${processingResult.slides.length} slides extra√≠dos.`
    })

  } catch (error) {
    console.error('Upload API error:', error)
    
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : 'Erro interno do servidor'
    }, { status: 500 })
  }
}

export async function GET() {
  return NextResponse.json({
    success: true,
    message: 'Production PPTX Upload API - Ready',
    features: {
      s3Upload: !!process.env.AWS_ACCESS_KEY_ID,
      maxFileSize: '200MB',
      supportedFormats: ['.pptx', '.ppt', '.pdf', '.docx', '.odp'],
      processing: 'Real-time PPTX content extraction'
    }
  })
}

/**
 * Handle upload progress tracking
 */
export async function PATCH(request: NextRequest) {
  try {
    const { jobId } = await request.json()
    
    // In a real implementation, this would check job status from a queue/database
    // For now, return mock progress
    
    return NextResponse.json({
      success: true,
      jobId,
      status: 'processing',
      progress: {
        upload: 100,
        processing: 75
      },
      eta: 30 // seconds
    })

  } catch (error) {
    return NextResponse.json({
      success: false,
      error: 'Failed to get upload progress'
    }, { status: 500 })
  }
}
