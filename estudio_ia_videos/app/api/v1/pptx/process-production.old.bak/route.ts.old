
/**
 * Production PPTX Processing API
 * Real content extraction and analysis
 */

import { NextRequest, NextResponse } from 'next/server'
import { getSignedDownloadUrl } from '@/lib/aws-s3-config'
import { processPPTXFile, type PPTXProcessingResult } from '@/lib/pptx-processor-real'

export async function POST(request: NextRequest) {
  try {
    const { s3Key, jobId } = await request.json()
    
    if (!s3Key || !jobId) {
      return NextResponse.json(
        { error: 'S3 key e job ID s√£o obrigat√≥rios' },
        { status: 400 }
      )
    }
    
    console.log('üîÑ Starting PPTX processing for job:', jobId)
    
    // Get signed URL to download file from S3
    const downloadUrl = await getSignedDownloadUrl(s3Key)
    
    // Fetch file from S3
    const response = await fetch(downloadUrl)
    if (!response.ok) {
      throw new Error('Falha ao baixar arquivo do S3')
    }
    
    const fileBuffer = await response.arrayBuffer()
    
    // Create File object from ArrayBuffer for processing
    const fileBlob = new Blob([fileBuffer])
    const processingFile = new File([fileBlob], 'presentation.pptx', {
      type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'
    })

    // Process PPTX with real processor
    const processedData: PPTXProcessingResult = await processPPTXFile(processingFile)
    
    console.log('‚úÖ PPTX processing completed:', {
      slides: processedData.slides.length,
      totalDuration: processedData.stats.totalDuration || 0,
      images: processedData.slides.reduce((acc: number, slide: any) => acc + slide.images.length, 0)
    })
    
    // Generate timeline data
    const timelineData = {
      scenes: processedData.slides.map((slide: any, index: number) => ({
        id: `scene-${index + 1}`,
        type: 'slide',
        title: slide.title || `Slide ${index + 1}`,
        content: slide.content,
        notes: slide.notes,
        duration: slide.duration,
        startTime: processedData.slides
          .slice(0, index)
          .reduce((acc: number, s: any) => acc + s.duration, 0),
        images: slide.images,
        animations: slide.animations,
        layout: slide.layout
      })),
      totalDuration: processedData.stats.totalDuration || 0,
      metadata: {
        slideCount: processedData.slides.length,
        imageCount: processedData.slides.reduce((acc: number, slide: any) => acc + slide.images.length, 0),
        hasAnimations: processedData.slides.some((slide: any) => slide.animations.length > 0),
        estimatedVideoSize: Math.ceil((processedData.stats.totalDuration || 0) * 2), // 2MB per second estimate
      }
    }
    
    // Return processed data
    return NextResponse.json({
      success: true,
      jobId,
      data: processedData,
      timeline: timelineData,
      message: 'Processamento conclu√≠do com sucesso'
    })
    
  } catch (error) {
    console.error('Processing API Error:', error)
    return NextResponse.json(
      { 
        error: 'Erro no processamento',
        details: error instanceof Error ? error.message : 'Erro desconhecido'
      },
      { status: 500 }
    )
  }
}
