
/**
 * üì§ Upload PPTX Aprimorado com Processamento Real
 * Interface para upload e an√°lise de arquivos
 */

'use client'

import React, { useState, useCallback } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Progress } from '@/components/ui/progress'
import { Badge } from '@/components/ui/badge'
// Using native file input instead of react-dropzone
import { toast } from 'react-hot-toast'
import { 
  Upload, 
  FileText, 
  CheckCircle, 
  AlertCircle,
  Loader,
  Eye,
  Play,
  Settings,
  Sparkles,
  Clock,
  BarChart3
} from 'lucide-react'

interface ProcessedPPTX {
  pptx: any
  timeline: any
  suggestions: {
    recommendedVoice: string
    estimatedRenderTime: number
    contentComplexity: 'simple' | 'medium' | 'complex'
    complianceCheck: Array<{
      rule: string
      status: 'ok' | 'warning' | 'error'
      message: string
    }>
  }
}

interface Props {
  onProcessComplete?: (data: ProcessedPPTX) => void
  onCancel?: () => void
}

export function EnhancedPPTXUpload({ onProcessComplete, onCancel }: Props) {
  const [uploadProgress, setUploadProgress] = useState(0)
  const [processingStep, setProcessingStep] = useState('')
  const [isProcessing, setIsProcessing] = useState(false)
  const [processedData, setProcessedData] = useState<ProcessedPPTX | null>(null)
  const [uploadedFile, setUploadedFile] = useState<File | null>(null)

  const onDrop = useCallback((acceptedFiles: File[]) => {
    const file = acceptedFiles[0]
    
    if (!file) return

    setUploadedFile(file)
    handleFileProcess(file)
  }, [])

  // Simplified file handling without react-dropzone
  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files
    if (files && files.length > 0) {
      onDrop([files[0]], [])
    }
  }

  const handleFileProcess = async (file: File) => {
    try {
      setIsProcessing(true)
      setUploadProgress(0)
      setProcessingStep('Fazendo upload do arquivo...')

      // Simular upload progress
      for (let i = 0; i <= 100; i += 10) {
        setUploadProgress(i)
        await new Promise(resolve => setTimeout(resolve, 100))
      }

      setProcessingStep('Analisando estrutura do PPTX...')
      
      // Criar FormData para envio
      const formData = new FormData()
      formData.append('file', file)

      const response = await fetch('/api/v1/pptx/process', {
        method: 'POST',
        body: formData
      })

      const data = await response.json()

      if (data.success) {
        setProcessedData(data.data)
        setProcessingStep('Processamento conclu√≠do!')
        toast.success('‚úÖ PPTX processado com sucesso!')
      } else {
        throw new Error(data.error || 'Erro no processamento')
      }

    } catch (error) {
      console.error('Processing error:', error)
      toast.error(`‚ùå ${error instanceof Error ? error.message : 'Erro no processamento'}`)
      setProcessingStep('Erro no processamento')
    } finally {
      setIsProcessing(false)
    }
  }

  const handleStartEditing = () => {
    if (processedData) {
      onProcessComplete?.(processedData)
    }
  }

  const getComplexityColor = (complexity: string) => {
    switch (complexity) {
      case 'simple': return 'bg-green-100 text-green-800'
      case 'medium': return 'bg-yellow-100 text-yellow-800'
      case 'complex': return 'bg-red-100 text-red-800'
      default: return 'bg-gray-100 text-gray-800'
    }
  }

  const getComplexityDescription = (complexity: string) => {
    switch (complexity) {
      case 'simple': return 'F√°cil de processar'
      case 'medium': return 'Moderadamente complexo'
      case 'complex': return 'Muitos elementos'
      default: return 'Analisando...'
    }
  }

  return (
    <div className="max-w-4xl mx-auto space-y-6">
      {/* Upload Area */}
      {!processedData && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center">
              <Upload className="h-5 w-5 mr-2 text-blue-600" />
              Upload de Arquivo PPTX
            </CardTitle>
          </CardHeader>
          
          <CardContent>
            <div
              className="border-2 border-dashed rounded-lg p-8 text-center cursor-pointer transition-colors border-gray-300 hover:border-gray-400"
              onClick={() => document.getElementById('file-input-enhanced')?.click()}
            >
              <input 
                id="file-input-enhanced"
                type="file"
                accept=".pptx,.ppt"
                onChange={handleFileSelect}
                className="hidden"
              />
              
              {isProcessing ? (
                <div className="space-y-4">
                  <Loader className="h-12 w-12 text-blue-600 mx-auto animate-spin" />
                  <div>
                    <p className="text-lg font-medium text-gray-900">{processingStep}</p>
                    <Progress value={uploadProgress} className="w-full mt-2" />
                    <p className="text-sm text-gray-600 mt-1">{uploadProgress}%</p>
                  </div>
                </div>
              ) : isDragActive ? (
                <div className="space-y-2">
                  <FileText className="h-12 w-12 text-blue-600 mx-auto" />
                  <p className="text-lg font-medium text-blue-900">Solte o arquivo aqui...</p>
                </div>
              ) : (
                <div className="space-y-4">
                  <FileText className="h-12 w-12 text-gray-400 mx-auto" />
                  <div>
                    <p className="text-lg font-medium text-gray-900">
                      Arraste seu arquivo PPTX aqui
                    </p>
                    <p className="text-gray-600">ou clique para selecionar</p>
                  </div>
                  
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm text-gray-600 max-w-md mx-auto">
                    <div className="text-center">
                      <CheckCircle className="h-4 w-4 text-green-600 mx-auto mb-1" />
                      <span>M√°ximo 50MB</span>
                    </div>
                    <div className="text-center">
                      <CheckCircle className="h-4 w-4 text-green-600 mx-auto mb-1" />
                      <span>Apenas .pptx</span>
                    </div>
                    <div className="text-center">
                      <CheckCircle className="h-4 w-4 text-green-600 mx-auto mb-1" />
                      <span>Processamento IA</span>
                    </div>
                  </div>
                </div>
              )}
            </div>

            {uploadedFile && !isProcessing && (
              <div className="mt-4 p-3 bg-gray-50 rounded-lg">
                <div className="flex items-center justify-between">
                  <div className="flex items-center">
                    <FileText className="h-4 w-4 text-blue-600 mr-2" />
                    <span className="text-sm font-medium">{uploadedFile.name}</span>
                  </div>
                  <Badge variant="outline">
                    {(uploadedFile.size / 1024 / 1024).toFixed(1)} MB
                  </Badge>
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      )}

      {/* Resultados do Processamento */}
      {processedData && (
        <div className="space-y-6">
          {/* Informa√ß√µes Gerais */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <CheckCircle className="h-5 w-5 mr-2 text-green-600" />
                An√°lise Conclu√≠da
              </CardTitle>
            </CardHeader>
            
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                <div className="text-center">
                  <div className="text-2xl font-bold text-blue-600">
                    {processedData.pptx.metadata.slideCount}
                  </div>
                  <div className="text-sm text-gray-600">Slides</div>
                </div>
                
                <div className="text-center">
                  <div className="text-2xl font-bold text-green-600">
                    {Math.floor(processedData.timeline.totalDuration / 60)}min
                  </div>
                  <div className="text-sm text-gray-600">Dura√ß√£o</div>
                </div>
                
                <div className="text-center">
                  <Badge className={getComplexityColor(processedData.suggestions.contentComplexity)}>
                    {processedData.suggestions.contentComplexity}
                  </Badge>
                  <div className="text-sm text-gray-600 mt-1">
                    {getComplexityDescription(processedData.suggestions.contentComplexity)}
                  </div>
                </div>
                
                <div className="text-center">
                  <div className="text-2xl font-bold text-purple-600">
                    ~{processedData.suggestions.estimatedRenderTime}s
                  </div>
                  <div className="text-sm text-gray-600">Tempo Renderiza√ß√£o</div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Compliance Check */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <BarChart3 className="h-5 w-5 mr-2 text-purple-600" />
                Verifica√ß√£o de Conformidade
              </CardTitle>
            </CardHeader>
            
            <CardContent>
              <div className="space-y-3">
                {processedData.suggestions.complianceCheck.map((check, index) => (
                  <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                    <div className="flex items-center">
                      {check.status === 'ok' && <CheckCircle className="h-4 w-4 text-green-600 mr-2" />}
                      {check.status === 'warning' && <AlertCircle className="h-4 w-4 text-yellow-600 mr-2" />}
                      {check.status === 'error' && <AlertCircle className="h-4 w-4 text-red-600 mr-2" />}
                      <div>
                        <div className="font-medium text-sm">{check.rule}</div>
                        <div className="text-xs text-gray-600">{check.message}</div>
                      </div>
                    </div>
                    <Badge variant={check.status === 'ok' ? 'default' : 'secondary'}>
                      {check.status}
                    </Badge>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>

          {/* Preview dos Slides */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <Eye className="h-5 w-5 mr-2 text-blue-600" />
                Preview dos Slides
              </CardTitle>
            </CardHeader>
            
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {processedData.timeline.scenes.slice(0, 6).map((scene: any, index: number) => (
                  <div key={scene.id} className="border rounded-lg p-3 hover:shadow-md transition-shadow">
                    <div className="aspect-video bg-gradient-to-br from-blue-500 to-purple-600 rounded mb-2 flex items-center justify-center text-white text-xs">
                      Slide {index + 1}
                    </div>
                    <div className="space-y-1">
                      <h4 className="font-medium text-sm truncate">{scene.title}</h4>
                      <p className="text-xs text-gray-600 line-clamp-2">{scene.content}</p>
                      <div className="flex items-center justify-between text-xs text-gray-500">
                        <span>{scene.duration}s</span>
                        <Badge variant="outline" className="text-xs">
                          {scene.transition}
                        </Badge>
                      </div>
                    </div>
                  </div>
                ))}
                
                {processedData.timeline.scenes.length > 6 && (
                  <div className="border rounded-lg p-3 flex items-center justify-center text-gray-500">
                    <div className="text-center">
                      <Sparkles className="h-6 w-6 mx-auto mb-2" />
                      <div className="text-sm">+{processedData.timeline.scenes.length - 6} slides</div>
                    </div>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>

          {/* A√ß√µes */}
          <div className="flex items-center justify-center space-x-4">
            <Button onClick={onCancel} variant="outline">
              Cancelar
            </Button>
            
            <Button 
              onClick={handleStartEditing}
              className="bg-blue-600 hover:bg-blue-700"
            >
              <Play className="h-4 w-4 mr-2" />
              Abrir no Editor
            </Button>
            
            <Button variant="outline">
              <Settings className="h-4 w-4 mr-2" />
              Configura√ß√µes
            </Button>
          </div>
        </div>
      )}
    </div>
  )
}
