

'use client'

import { useState, useCallback } from 'react'
// Using native file input for compatibility
import { Button } from '../ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../ui/card'
import { Badge } from '../ui/badge'
import { Progress } from '../ui/progress'
import { Alert, AlertDescription } from '../ui/alert'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '../ui/tabs'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select'
import { Switch } from '../ui/switch'
import { Label } from '../ui/label'
import { Textarea } from '../ui/textarea'
import { 
  Upload, 
  FileText, 
  CheckCircle, 
  AlertTriangle, 
  Settings, 
  Play,
  Eye,
  Download,
  RefreshCw,
  Volume2,
  User,
  Clock,
  BarChart3,
  Layers
} from 'lucide-react'
import { useToast } from '../ui/use-toast'

interface WizardStep {
  id: 'upload' | 'configure' | 'review' | 'generate'
  title: string
  description: string
  completed: boolean
}

interface PPTXWizardProps {
  onComplete: (projectData: any) => void
  onCancel: () => void
}

export function PPTXImportWizard({ onComplete, onCancel }: PPTXWizardProps) {
  const [currentStep, setCurrentStep] = useState<WizardStep['id']>('upload')
  const [uploadedFile, setUploadedFile] = useState<File | null>(null)
  const [parseResult, setParseResult] = useState<any>(null)
  const [voiceConfig, setVoiceConfig] = useState({
    voiceId: 'pt-BR-AntonioNeural',
    language: 'pt-BR',
    speed: 1.0,
    pitch: 1.0
  })
  const [avatarConfig, setAvatarConfig] = useState({
    enabled: true,
    position: 'right',
    avatarId: 'professional-male-1'
  })
  const [generationProgress, setGenerationProgress] = useState(0)
  const [isProcessing, setIsProcessing] = useState(false)
  const { toast } = useToast()

  const steps: WizardStep[] = [
    {
      id: 'upload',
      title: 'Upload PPTX',
      description: 'Envie seu arquivo PowerPoint',
      completed: uploadedFile !== null
    },
    {
      id: 'configure',
      title: 'Configurar',
      description: 'Ajuste voz e avatar',
      completed: parseResult !== null
    },
    {
      id: 'review',
      title: 'Revisar',
      description: 'Revise slides e templates',
      completed: false
    },
    {
      id: 'generate',
      title: 'Gerar',
      description: 'Criar vídeo final',
      completed: false
    }
  ]

  // File upload handling
  const onDrop = useCallback(async (acceptedFiles: File[]) => {
    const file = acceptedFiles[0]
    if (!file) return

    setUploadedFile(file)
    setIsProcessing(true)

    try {
      const formData = new FormData()
      formData.append('file', file)
      formData.append('autoTemplate', 'true')

      const response = await fetch('/api/pptx/parse-enhanced', {
        method: 'POST',
        body: formData
      })

      if (!response.ok) {
        throw new Error('Falha no processamento do arquivo')
      }

      const result = await response.json()
      setParseResult(result)
      
      toast({
        title: "Arquivo processado com sucesso!",
        description: `${result.parseResult.slides.length} slides extraídos`,
      })

      setCurrentStep('configure')

    } catch (error) {
      toast({
        title: "Erro no processamento",
        description: "Falha ao processar o arquivo PPTX",
        variant: "destructive"
      })
    } finally {
      setIsProcessing(false)
    }
  }, [toast])

  // File input handler
  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files
    if (files && files.length > 0) {
      onDrop([files[0]], [])
    }
  }

  // Voice selection
  const voiceOptions = [
    { id: 'pt-BR-AntonioNeural', name: 'Antonio (Masculino)', gender: 'male' },
    { id: 'pt-BR-FranciscaNeural', name: 'Francisca (Feminino)', gender: 'female' },
    { id: 'pt-BR-BrendaNeural', name: 'Brenda (Feminino)', gender: 'female' },
    { id: 'pt-BR-DonatoNeural', name: 'Donato (Masculino)', gender: 'male' },
    { id: 'pt-BR-JulioNeural', name: 'Júlio (Masculino)', gender: 'male' }
  ]

  // Generate narration for all slides
  const generateNarration = async () => {
    if (!parseResult) return

    setIsProcessing(true)
    setGenerationProgress(0)

    try {
      const response = await fetch('/api/narration/generate-batch', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          slides: parseResult.parseResult.slides,
          voiceConfig,
          options: {
            avatarEnabled: avatarConfig.enabled
          }
        })
      })

      if (!response.ok) {
        throw new Error('Falha na geração de narração')
      }

      const result = await response.json()
      
      // Update parse result with narration
      setParseResult((prev: any) => ({
        ...prev,
        narrationResults: result.results
      }))

      setCurrentStep('review')
      
      toast({
        title: "Narração gerada!",
        description: `${result.summary.successfulSlides} de ${result.summary.totalSlides} slides processados`,
      })

    } catch (error) {
      toast({
        title: "Erro na narração",
        description: "Falha ao gerar narração automática",
        variant: "destructive"
      })
    } finally {
      setIsProcessing(false)
      setGenerationProgress(0)
    }
  }

  // Complete wizard and start video generation
  const completeWizard = async () => {
    if (!parseResult) return

    const projectData = {
      title: `Vídeo: ${uploadedFile?.name?.replace(/\.[^/.]+$/, '') || 'Sem título'}`,
      description: `Gerado a partir de ${parseResult.parseResult.slides.length} slides`,
      slides: parseResult.generatedScenes || [],
      narration: parseResult.narrationResults || [],
      voiceConfig,
      avatarConfig,
      metadata: {
        sourceFile: uploadedFile?.name,
        totalDuration: parseResult.summary?.estimatedDuration || 0,
        qualityScore: parseResult.summary?.qualityScore || 0,
        createdAt: new Date().toISOString()
      }
    }

    onComplete(projectData)
  }

  return (
    <div className="max-w-4xl mx-auto p-6">
      {/* Progress Header */}
      <div className="mb-8">
        <h2 className="text-3xl font-bold text-gray-900 dark:text-white mb-2">
          Importar Apresentação PPTX
        </h2>
        <p className="text-gray-600 dark:text-gray-400 mb-6">
          Transforme sua apresentação em vídeo com narração automática
        </p>
        
        {/* Step Progress */}
        <div className="flex items-center gap-4 mb-6">
          {steps.map((step, index) => (
            <div key={step.id} className="flex items-center gap-2">
              <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${
                currentStep === step.id 
                  ? 'bg-blue-600 text-white' 
                  : step.completed 
                    ? 'bg-green-600 text-white'
                    : 'bg-gray-200 text-gray-600'
              }`}>
                {step.completed ? <CheckCircle className="w-4 h-4" /> : index + 1}
              </div>
              <div className="flex flex-col">
                <span className={`text-sm font-medium ${
                  currentStep === step.id ? 'text-blue-600' : 'text-gray-900 dark:text-white'
                }`}>
                  {step.title}
                </span>
                <span className="text-xs text-gray-500">{step.description}</span>
              </div>
              {index < steps.length - 1 && (
                <div className={`w-8 h-px ${step.completed ? 'bg-green-600' : 'bg-gray-300'}`} />
              )}
            </div>
          ))}
        </div>
      </div>

      {/* Step Content */}
      <Card>
        <CardContent className="p-6">
          
          {/* STEP 1: Upload */}
          {currentStep === 'upload' && (
            <div className="space-y-6">
              <div className="text-center">
                <FileText className="w-16 h-16 text-blue-600 mx-auto mb-4" />
                <h3 className="text-xl font-semibold mb-2">Envie seu arquivo PPTX</h3>
                <p className="text-gray-600 dark:text-gray-400 mb-6">
                  Aceito arquivos .pptx e .ppt até 50MB
                </p>
              </div>

              <div
                {...getRootProps()}
                className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors cursor-pointer ${
                  isDragActive 
                    ? 'border-blue-500 bg-blue-50 dark:bg-blue-950' 
                    : 'border-gray-300 hover:border-gray-400'
                }`}
              >
                <input {...getInputProps()} />
                {isProcessing ? (
                  <div className="space-y-4">
                    <RefreshCw className="w-8 h-8 animate-spin text-blue-600 mx-auto" />
                    <p className="text-sm text-gray-600">Processando arquivo...</p>
                  </div>
                ) : (
                  <div className="space-y-4">
                    <Upload className="w-8 h-8 text-gray-400 mx-auto" />
                    <div>
                      <p className="text-lg font-medium">
                        {isDragActive ? 'Solte o arquivo aqui' : 'Clique ou arraste um arquivo PPTX'}
                      </p>
                      <p className="text-sm text-gray-500">
                        Formatos aceitos: .pptx, .ppt (máx. 50MB)
                      </p>
                    </div>
                  </div>
                )}
              </div>

              {uploadedFile && (
                <Alert>
                  <CheckCircle className="h-4 w-4" />
                  <AlertDescription>
                    Arquivo carregado: {uploadedFile.name} ({(uploadedFile.size / 1024 / 1024).toFixed(1)} MB)
                  </AlertDescription>
                </Alert>
              )}
            </div>
          )}

          {/* STEP 2: Configure */}
          {currentStep === 'configure' && parseResult && (
            <div className="space-y-6">
              <div className="text-center mb-6">
                <Settings className="w-16 h-16 text-blue-600 mx-auto mb-4" />
                <h3 className="text-xl font-semibold mb-2">Configurar Narração e Avatar</h3>
                <p className="text-gray-600 dark:text-gray-400">
                  {parseResult.parseResult.slides.length} slides detectados
                </p>
              </div>

              <Tabs defaultValue="voice" className="w-full">
                <TabsList className="grid w-full grid-cols-3">
                  <TabsTrigger value="voice">
                    <Volume2 className="w-4 h-4 mr-2" />
                    Voz
                  </TabsTrigger>
                  <TabsTrigger value="avatar">
                    <User className="w-4 h-4 mr-2" />
                    Avatar
                  </TabsTrigger>
                  <TabsTrigger value="quality">
                    <BarChart3 className="w-4 h-4 mr-2" />
                    Qualidade
                  </TabsTrigger>
                </TabsList>

                <TabsContent value="voice" className="space-y-4">
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <Label htmlFor="voice-select">Selecionar Voz</Label>
                      <Select value={voiceConfig.voiceId} onValueChange={(value) => 
                        setVoiceConfig((prev: any) => ({ ...prev, voiceId: value }))
                      }>
                        <SelectTrigger>
                          <SelectValue placeholder="Escolha uma voz" />
                        </SelectTrigger>
                        <SelectContent>
                          {voiceOptions.map(voice => (
                            <SelectItem key={voice.id} value={voice.id}>
                              {voice.name}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>
                    
                    <div>
                      <Label htmlFor="speed">Velocidade da Fala</Label>
                      <Select value={voiceConfig.speed.toString()} onValueChange={(value) =>
                        setVoiceConfig((prev: any) => ({ ...prev, speed: parseFloat(value) }))
                      }>
                        <SelectTrigger>
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="0.8">Lenta (0.8x)</SelectItem>
                          <SelectItem value="1.0">Normal (1.0x)</SelectItem>
                          <SelectItem value="1.2">Rápida (1.2x)</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>
                </TabsContent>

                <TabsContent value="avatar" className="space-y-4">
                  <div className="flex items-center space-x-2">
                    <Switch
                      checked={avatarConfig.enabled}
                      onCheckedChange={(checked) =>
                        setAvatarConfig(prev => ({ ...prev, enabled: checked }))
                      }
                    />
                    <Label>Ativar avatar durante apresentação</Label>
                  </div>

                  {avatarConfig.enabled && (
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <Label>Avatar</Label>
                        <Select value={avatarConfig.avatarId} onValueChange={(value) =>
                          setAvatarConfig(prev => ({ ...prev, avatarId: value }))
                        }>
                          <SelectTrigger>
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="professional-male-1">Profissional Masculino</SelectItem>
                            <SelectItem value="professional-female-1">Profissional Feminino</SelectItem>
                            <SelectItem value="casual-male-1">Casual Masculino</SelectItem>
                            <SelectItem value="casual-female-1">Casual Feminino</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      
                      <div>
                        <Label>Posição</Label>
                        <Select value={avatarConfig.position} onValueChange={(value) =>
                          setAvatarConfig(prev => ({ ...prev, position: value }))
                        }>
                          <SelectTrigger>
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="left">Esquerda</SelectItem>
                            <SelectItem value="right">Direita</SelectItem>
                            <SelectItem value="bottom">Inferior</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                    </div>
                  )}
                </TabsContent>

                <TabsContent value="quality" className="space-y-4">
                  {parseResult.summary && (
                    <div className="grid grid-cols-2 gap-4">
                      <Card>
                        <CardHeader className="pb-2">
                          <CardTitle className="text-lg">Pontuação de Qualidade</CardTitle>
                        </CardHeader>
                        <CardContent>
                          <div className="flex items-center gap-2">
                            <Progress value={parseResult.summary.qualityScore} className="flex-1" />
                            <span className="font-bold text-lg">{parseResult.summary.qualityScore}%</span>
                          </div>
                        </CardContent>
                      </Card>
                      
                      <Card>
                        <CardHeader className="pb-2">
                          <CardTitle className="text-lg">Duração Estimada</CardTitle>
                        </CardHeader>
                        <CardContent>
                          <div className="flex items-center gap-2">
                            <Clock className="w-5 h-5 text-blue-600" />
                            <span className="font-bold text-lg">
                              {Math.round(parseResult.summary.estimatedDuration / 60)}min {parseResult.summary.estimatedDuration % 60}s
                            </span>
                          </div>
                        </CardContent>
                      </Card>
                    </div>
                  )}

                  {parseResult.contentIssues && (
                    <div className="space-y-2">
                      <h4 className="font-medium">Questões de Conteúdo</h4>
                      {parseResult.contentIssues.map((slideIssue: any, index: number) => (
                        slideIssue.issues.length > 0 && (
                          <Alert key={index} variant={slideIssue.issues.some((i: any) => i.type === 'error') ? 'destructive' : 'default'}>
                            <AlertTriangle className="h-4 w-4" />
                            <AlertDescription>
                              <strong>Slide {slideIssue.slideNumber}:</strong> {slideIssue.issues.map((i: any) => i.message).join(', ')}
                            </AlertDescription>
                          </Alert>
                        )
                      ))}
                    </div>
                  )}
                </TabsContent>
              </Tabs>

              <div className="flex justify-between pt-4">
                <Button variant="outline" onClick={() => setCurrentStep('upload')}>
                  Voltar
                </Button>
                <Button onClick={generateNarration} disabled={isProcessing}>
                  {isProcessing ? (
                    <>
                      <RefreshCw className="w-4 h-4 mr-2 animate-spin" />
                      Processando...
                    </>
                  ) : (
                    <>
                      <Play className="w-4 h-4 mr-2" />
                      Gerar Narração
                    </>
                  )}
                </Button>
              </div>
            </div>
          )}

          {/* STEP 3: Review */}
          {currentStep === 'review' && parseResult && (
            <div className="space-y-6">
              <div className="text-center mb-6">
                <Eye className="w-16 h-16 text-blue-600 mx-auto mb-4" />
                <h3 className="text-xl font-semibold mb-2">Revisar Slides e Templates</h3>
                <p className="text-gray-600 dark:text-gray-400">
                  Ajuste os templates e configurações antes de gerar o vídeo
                </p>
              </div>

              {/* Slides Preview */}
              <div className="space-y-4 max-h-96 overflow-y-auto">
                {parseResult.parseResult.slides.map((slide: any, index: number) => (
                  <Card key={slide.slideNumber} className="border">
                    <CardHeader className="pb-3">
                      <div className="flex items-center justify-between">
                        <CardTitle className="text-lg">
                          Slide {slide.slideNumber}: {slide.title}
                        </CardTitle>
                        <div className="flex items-center gap-2">
                          <Badge variant="secondary">
                            <Layers className="w-3 h-3 mr-1" />
                            {parseResult.sceneMappings?.[index]?.templateId || 'Padrão'}
                          </Badge>
                          <Badge variant="outline">
                            <Clock className="w-3 h-3 mr-1" />
                            {parseResult.generatedScenes?.[index]?.duration || 15}s
                          </Badge>
                        </div>
                      </div>
                    </CardHeader>
                    <CardContent>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                          <h5 className="font-medium mb-2">Conteúdo</h5>
                          {slide.bullets && slide.bullets.length > 0 ? (
                            <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                              {slide.bullets.map((bullet: string, i: number) => (
                                <li key={i} className="flex items-start gap-2">
                                  <span className="w-1 h-1 bg-gray-400 rounded-full mt-2 flex-shrink-0" />
                                  {bullet}
                                </li>
                              ))}
                            </ul>
                          ) : (
                            <p className="text-sm text-gray-600 dark:text-gray-400">
                              {slide.notes || 'Sem conteúdo textual'}
                            </p>
                          )}
                        </div>
                        
                        <div>
                          <h5 className="font-medium mb-2">Narração</h5>
                          <p className="text-sm text-gray-600 dark:text-gray-400 bg-gray-50 dark:bg-gray-800 p-3 rounded">
                            {parseResult.narrationResults?.[index]?.segments?.map((seg: any) => seg.text).join(' ') || 'Narração será gerada...'}
                          </p>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>

              <div className="flex justify-between pt-4">
                <Button variant="outline" onClick={() => setCurrentStep('configure')}>
                  Voltar
                </Button>
                <Button onClick={() => setCurrentStep('generate')}>
                  <Play className="w-4 h-4 mr-2" />
                  Continuar para Geração
                </Button>
              </div>
            </div>
          )}

          {/* STEP 4: Generate */}
          {currentStep === 'generate' && (
            <div className="space-y-6">
              <div className="text-center mb-6">
                <Play className="w-16 h-16 text-green-600 mx-auto mb-4" />
                <h3 className="text-xl font-semibold mb-2">Gerar Vídeo Final</h3>
                <p className="text-gray-600 dark:text-gray-400">
                  Pronto para criar seu vídeo de treinamento!
                </p>
              </div>

              {/* Generation Summary */}
              <Card>
                <CardHeader>
                  <CardTitle>Resumo da Geração</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="grid grid-cols-2 gap-4">
                    <div className="flex items-center gap-2">
                      <FileText className="w-4 h-4 text-blue-600" />
                      <span className="text-sm">
                        <strong>{parseResult.parseResult.slides.length}</strong> slides
                      </span>
                    </div>
                    <div className="flex items-center gap-2">
                      <Clock className="w-4 h-4 text-green-600" />
                      <span className="text-sm">
                        <strong>~{Math.round(parseResult.summary?.estimatedDuration / 60) || 2}</strong> minutos
                      </span>
                    </div>
                    <div className="flex items-center gap-2">
                      <Volume2 className="w-4 h-4 text-purple-600" />
                      <span className="text-sm">
                        Voz: <strong>{voiceOptions.find(v => v.id === voiceConfig.voiceId)?.name}</strong>
                      </span>
                    </div>
                    <div className="flex items-center gap-2">
                      <User className="w-4 h-4 text-orange-600" />
                      <span className="text-sm">
                        Avatar: <strong>{avatarConfig.enabled ? 'Ativado' : 'Desativado'}</strong>
                      </span>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <div className="flex justify-between pt-4">
                <Button variant="outline" onClick={() => setCurrentStep('review')}>
                  Voltar
                </Button>
                <Button onClick={completeWizard} size="lg" className="bg-green-600 hover:bg-green-700">
                  <Download className="w-4 h-4 mr-2" />
                  Criar Projeto de Vídeo
                </Button>
              </div>
            </div>
          )}

        </CardContent>
      </Card>

      {/* Cancel Button */}
      <div className="flex justify-center mt-6">
        <Button variant="ghost" onClick={onCancel}>
          Cancelar
        </Button>
      </div>
    </div>
  )
}
