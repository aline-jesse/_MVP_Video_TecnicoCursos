

'use client'

import { useState } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../ui/card'
import { Button } from '../ui/button'
import { Input } from '../ui/input'
import { Label } from '../ui/label'
import { Textarea } from '../ui/textarea'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select'
import { Slider } from '../ui/slider'
import { Badge } from '../ui/badge'
import { Separator } from '../ui/separator'
import { 
  Sparkles, 
  Play, 
  DollarSign, 
  Clock, 
  Settings,
  Download,
  Eye,
  AlertTriangle,
  Info
} from 'lucide-react'
import { toast } from 'react-hot-toast'

interface VideoGenerationParams {
  prompt: string
  duration: number
  seed?: number
  guidance_scale?: number
  fps?: number
  resolution: '720p' | '1080p' | '1440p'
  style: 'realistic' | 'animated' | 'cartoon'
  aspect_ratio: '16:9' | '9:16' | '1:1'
  preferred_provider?: string
}

interface GenerationResult {
  video_url: string
  thumbnail_url?: string
  duration: number
  file_size: number
  generation_time: number
  provider: string
  cost: number
}

export default function AIVideoGenerator() {
  const [params, setParams] = useState<VideoGenerationParams>({
    prompt: '',
    duration: 5,
    resolution: '720p',
    style: 'realistic',
    aspect_ratio: '16:9'
  })
  
  const [generating, setGenerating] = useState(false)
  const [result, setResult] = useState<GenerationResult | null>(null)
  const [providers, setProviders] = useState<any[]>([])
  const [estimatedCost, setEstimatedCost] = useState(0)

  // Load providers on mount
  useState(() => {
    fetchProviders()
  })

  // Update cost estimate when parameters change
  useState(() => {
    updateCostEstimate()
  })

  const fetchProviders = async () => {
    try {
      const response = await fetch('/api/videos/generate-ai')
      const result = await response.json()
      
      if (result.success) {
        setProviders(result.data.providers)
      }
    } catch (error) {
      console.error('Error fetching providers:', error)
    }
  }

  const updateCostEstimate = () => {
    const provider = providers.find(p => p.name === params.preferred_provider) || providers[0]
    if (provider) {
      const cost = params.duration * provider.costPerSecond
      setEstimatedCost(cost)
    }
  }

  const handleGenerate = async () => {
    if (!params.prompt.trim()) {
      toast.error('Digite uma descrição para o vídeo')
      return
    }

    setGenerating(true)
    
    try {
      const response = await fetch('/api/videos/generate-ai', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(params)
      })

      const result = await response.json()

      if (result.success) {
        setResult(result.data)
        toast.success('Vídeo gerado com sucesso!')
      } else {
        throw new Error(result.error || 'Erro na geração')
      }
      
    } catch (error) {
      console.error('Generation error:', error)
      toast.error('Erro ao gerar vídeo')
    } finally {
      setGenerating(false)
    }
  }

  const promptSuggestions = [
    'Trabalhador usando EPI corretamente em ambiente industrial',
    'Instrutor demonstrando procedimentos de segurança em altura',
    'Engenheiro explicando riscos em espaço confinado',
    'Supervisor orientando sobre uso de máquinas perigosas',
    'Trabalhador seguindo protocolos de emergência'
  ]

  const getResolutionInfo = (resolution: string) => {
    switch (resolution) {
      case '720p': return { pixels: '1280x720', quality: 'Boa', cost: '1x' }
      case '1080p': return { pixels: '1920x1080', quality: 'Alta', cost: '2x' }
      case '1440p': return { pixels: '2560x1440', quality: 'Premium', cost: '3x' }
      default: return { pixels: '1280x720', quality: 'Boa', cost: '1x' }
    }
  }

  return (
    <div className="space-y-6">
      {/* Generation Form */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Sparkles className="w-5 h-5 text-purple-600" />
            Gerador de Vídeo IA
          </CardTitle>
          <CardDescription>
            Crie clipes de vídeo profissionais usando inteligência artificial avançada
          </CardDescription>
        </CardHeader>
        
        <CardContent className="space-y-6">
          {/* Prompt */}
          <div className="space-y-2">
            <Label htmlFor="prompt">Descrição do Vídeo *</Label>
            <Textarea
              id="prompt"
              placeholder="Descreva o que você quer ver no vídeo..."
              value={params.prompt}
              onChange={(e) => setParams({...params, prompt: e.target.value})}
              className="min-h-[100px]"
            />
            
            {/* Prompt Suggestions */}
            <div className="flex flex-wrap gap-2">
              {promptSuggestions.map((suggestion, index) => (
                <Button
                  key={index}
                  variant="outline"
                  size="sm"
                  className="text-xs"
                  onClick={() => setParams({...params, prompt: suggestion})}
                >
                  {suggestion.substring(0, 40)}...
                </Button>
              ))}
            </div>
          </div>

          {/* Basic Settings */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label>Duração (segundos)</Label>
              <div className="space-y-2">
                <Slider
                  value={[params.duration]}
                  onValueChange={([value]) => setParams({...params, duration: value})}
                  max={15}
                  min={3}
                  step={0.5}
                  className="w-full"
                />
                <div className="text-sm text-gray-600 text-center">
                  {params.duration}s
                </div>
              </div>
            </div>

            <div className="space-y-2">
              <Label>Estilo Visual</Label>
              <Select 
                value={params.style} 
                onValueChange={(value: any) => setParams({...params, style: value})}
              >
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="realistic">Realista</SelectItem>
                  <SelectItem value="animated">Animado</SelectItem>
                  <SelectItem value="cartoon">Cartoon</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>

          {/* Advanced Settings */}
          <details className="border rounded-lg p-4">
            <summary className="cursor-pointer font-medium flex items-center gap-2">
              <Settings className="w-4 h-4" />
              Configurações Avançadas
            </summary>
            
            <div className="mt-4 space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <Label>Resolução</Label>
                  <Select 
                    value={params.resolution} 
                    onValueChange={(value: any) => setParams({...params, resolution: value})}
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="720p">720p HD</SelectItem>
                      <SelectItem value="1080p">1080p Full HD</SelectItem>
                      <SelectItem value="1440p">1440p 2K</SelectItem>
                    </SelectContent>
                  </Select>
                  <div className="text-xs text-gray-500">
                    {getResolutionInfo(params.resolution).pixels} - 
                    Custo: {getResolutionInfo(params.resolution).cost}
                  </div>
                </div>

                <div className="space-y-2">
                  <Label>Proporção</Label>
                  <Select 
                    value={params.aspect_ratio} 
                    onValueChange={(value: any) => setParams({...params, aspect_ratio: value})}
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="16:9">16:9 (Landscape)</SelectItem>
                      <SelectItem value="9:16">9:16 (Portrait)</SelectItem>
                      <SelectItem value="1:1">1:1 (Quadrado)</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label>FPS</Label>
                  <Select 
                    value={params.fps?.toString() || '24'} 
                    onValueChange={(value) => setParams({...params, fps: parseInt(value)})}
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="24">24 fps (Cinema)</SelectItem>
                      <SelectItem value="30">30 fps (Padrão)</SelectItem>
                      <SelectItem value="60">60 fps (Suave)</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label>Seed (Consistência)</Label>
                  <Input
                    type="number"
                    placeholder="Opcional - para resultados reproduzíveis"
                    value={params.seed || ''}
                    onChange={(e) => setParams({...params, seed: e.target.value ? parseInt(e.target.value) : undefined})}
                  />
                </div>

                <div className="space-y-2">
                  <Label>Guidance Scale</Label>
                  <div className="space-y-2">
                    <Slider
                      value={[params.guidance_scale || 7.5]}
                      onValueChange={([value]) => setParams({...params, guidance_scale: value})}
                      max={20}
                      min={1}
                      step={0.5}
                      className="w-full"
                    />
                    <div className="text-xs text-gray-600 text-center">
                      {params.guidance_scale || 7.5} (fidelidade ao prompt)
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </details>

          {/* Cost and Time Estimate */}
          <div className="bg-blue-50 p-4 rounded-lg">
            <div className="flex items-center justify-between mb-2">
              <h4 className="font-medium text-blue-900">Estimativas</h4>
              <Badge variant="outline" className="bg-blue-100 text-blue-700">
                {params.preferred_provider || 'Auto'}
              </Badge>
            </div>
            
            <div className="grid grid-cols-3 gap-4 text-center">
              <div>
                <div className="flex items-center justify-center gap-1 text-blue-600">
                  <DollarSign className="w-4 h-4" />
                  <span className="font-bold">${estimatedCost.toFixed(3)}</span>
                </div>
                <p className="text-xs text-blue-700">Custo</p>
              </div>
              
              <div>
                <div className="flex items-center justify-center gap-1 text-blue-600">
                  <Clock className="w-4 h-4" />
                  <span className="font-bold">{Math.ceil(params.duration * 2)}s</span>
                </div>
                <p className="text-xs text-blue-700">Tempo</p>
              </div>
              
              <div>
                <div className="flex items-center justify-center gap-1 text-blue-600">
                  <Download className="w-4 h-4" />
                  <span className="font-bold">{Math.ceil(params.duration * 2)}MB</span>
                </div>
                <p className="text-xs text-blue-700">Tamanho</p>
              </div>
            </div>
          </div>

          {/* Generate Button */}
          <Button 
            onClick={handleGenerate}
            disabled={generating || !params.prompt.trim()}
            className="w-full bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700"
            size="lg"
          >
            {generating ? (
              <>
                <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                Gerando Vídeo...
              </>
            ) : (
              <>
                <Sparkles className="w-4 h-4 mr-2" />
                Gerar Vídeo com IA
              </>
            )}
          </Button>

          {/* Important Notes */}
          <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-3">
            <div className="flex items-start gap-2">
              <Info className="w-4 h-4 text-yellow-600 mt-0.5" />
              <div className="text-sm text-yellow-800">
                <p className="font-medium mb-1">Dicas para melhores resultados:</p>
                <ul className="text-xs space-y-1">
                  <li>• Seja específico na descrição (ambiente, ações, detalhes)</li>
                  <li>• Use termos relacionados a segurança do trabalho</li>
                  <li>• Para treinamentos NR, mencione EPIs e procedimentos</li>
                  <li>• Vídeos mais curtos (3-7s) têm melhor qualidade</li>
                </ul>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Generation Result */}
      {result && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <CheckCircle className="w-5 h-5 text-green-600" />
              Vídeo Gerado com Sucesso
            </CardTitle>
            <CardDescription>
              Processado pelo provider {result.provider}
            </CardDescription>
          </CardHeader>
          
          <CardContent className="space-y-4">
            {/* Video Preview */}
            <div className="aspect-video bg-black rounded-lg flex items-center justify-center">
              <video 
                src={result.video_url}
                controls
                className="w-full h-full rounded-lg"
                poster={result.thumbnail_url}
              >
                Seu navegador não suporta vídeo HTML5.
              </video>
            </div>

            {/* Result Stats */}
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <div className="text-center">
                <div className="text-lg font-bold text-purple-600">{result.duration}s</div>
                <p className="text-xs text-gray-600">Duração</p>
              </div>
              
              <div className="text-center">
                <div className="text-lg font-bold text-blue-600">
                  {(result.file_size / (1024 * 1024)).toFixed(1)}MB
                </div>
                <p className="text-xs text-gray-600">Tamanho</p>
              </div>
              
              <div className="text-center">
                <div className="text-lg font-bold text-green-600">
                  ${result.cost.toFixed(3)}
                </div>
                <p className="text-xs text-gray-600">Custo</p>
              </div>
              
              <div className="text-center">
                <div className="text-lg font-bold text-orange-600">
                  {result.generation_time.toFixed(1)}s
                </div>
                <p className="text-xs text-gray-600">Tempo</p>
              </div>
            </div>

            {/* Actions */}
            <div className="flex gap-3">
              <Button onClick={() => window.open(result.video_url, '_blank')}>
                <Download className="w-4 h-4 mr-2" />
                Download
              </Button>
              
              <Button variant="outline">
                <Play className="w-4 h-4 mr-2" />
                Usar no Editor
              </Button>
              
              <Button variant="outline">
                <Eye className="w-4 h-4 mr-2" />
                Preview Avançado
              </Button>
            </div>

            {/* Generation Details */}
            <details className="border rounded-lg p-4">
              <summary className="cursor-pointer font-medium">
                Detalhes Técnicos
              </summary>
              <div className="mt-3 text-sm space-y-2">
                <div className="flex justify-between">
                  <span>Provider:</span>
                  <span className="font-medium">{result.provider}</span>
                </div>
                <div className="flex justify-between">
                  <span>Resolução:</span>
                  <span className="font-medium">{params.resolution}</span>
                </div>
                <div className="flex justify-between">
                  <span>Estilo:</span>
                  <span className="font-medium">{params.style}</span>
                </div>
                <div className="flex justify-between">
                  <span>Aspect Ratio:</span>
                  <span className="font-medium">{params.aspect_ratio}</span>
                </div>
                {params.seed && (
                  <div className="flex justify-between">
                    <span>Seed:</span>
                    <span className="font-medium">{params.seed}</span>
                  </div>
                )}
              </div>
            </details>
          </CardContent>
        </Card>
      )}

      {/* Provider Comparison */}
      {providers.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="text-base">Providers Disponíveis</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {providers.map((provider) => (
                <div key={provider.name} className="border rounded-lg p-3">
                  <div className="flex items-center justify-between mb-2">
                    <div>
                      <h4 className="font-medium">{provider.name}</h4>
                      <p className="text-xs text-gray-600">
                        Máx: {provider.maxDuration}s | ${provider.costPerSecond}/s
                      </p>
                    </div>
                    <div className="flex items-center gap-2">
                      {provider.supportsRealtime && (
                        <Badge variant="outline" className="text-xs">
                          Tempo Real
                        </Badge>
                      )}
                      <Button
                        variant={params.preferred_provider === provider.name ? "default" : "outline"}
                        size="sm"
                        onClick={() => setParams({...params, preferred_provider: provider.name})}
                      >
                        {params.preferred_provider === provider.name ? 'Selecionado' : 'Selecionar'}
                      </Button>
                    </div>
                  </div>
                  
                  <div className="text-xs text-gray-500">
                    Suporta: {provider.supportedResolutions.join(', ')}
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  )
}
