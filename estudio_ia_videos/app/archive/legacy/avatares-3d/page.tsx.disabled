

/**
 * ü§ñ Est√∫dio IA de V√≠deos - Avatares 3D Falantes
 * Biblioteca de Avatares Realistas com Sincroniza√ß√£o Labial
 */

'use client';

import React, { useState, useEffect, Suspense } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Slider } from '@/components/ui/slider';
import {
  PersonStanding,
  Play,
  Pause,
  Volume2,
  VolumeX,
  Settings,
  Eye,
  Smile,
  RefreshCw,
  Download,
  Upload,
  User,
  Palette,
  Activity,
  Brain,
  Mic,
  Languages,
  Crown,
  Sparkles,
  Target,
  Zap
} from 'lucide-react';
import { toast } from 'react-hot-toast';
import { Canvas } from '@react-three/fiber';
import { OrbitControls, PerspectiveCamera, Environment, Float } from '@react-three/drei';
import { Leva, useControls } from 'leva';

// Components
import Avatar3DRenderer from '@/components/avatars/avatar-3d-renderer';
import AvatarGallery from '@/components/avatars/avatar-gallery';
import LipSyncController from '@/components/avatars/lip-sync-controller';
import VoiceAnalyzer from '@/components/avatars/voice-analyzer';
import AvatarCustomizer from '@/components/avatars/avatar-customizer';
import AvatarIntegration from '@/components/avatars/avatar-integration';

interface Avatar3D {
  id: string;
  name: string;
  category: 'profissional' | 'casual' | 'especialista' | 'instrutor';
  gender: 'masculino' | 'feminino' | 'neutro';
  ethnicity: string;
  hairStyle: string;
  clothing: string;
  bodyType: string;
  faceType: string;
  expressions: string[];
  languages: string[];
  price: number;
  premium: boolean;
  modelUrl: string;
  textureUrl: string;
  animationsUrl: string;
  preview: string;
  stats: {
    downloads: number;
    rating: number;
    reviews: number;
  };
}

interface TalkingSession {
  id: string;
  text: string;
  voice: string;
  avatar: string;
  speed: number;
  emotion: string;
  duration: number;
  isPlaying: boolean;
  audioUrl?: string;
}

export default function Avatares3DPage() {
  const [selectedAvatar, setSelectedAvatar] = useState<Avatar3D | null>(null);
  const [talkingSession, setTalkingSession] = useState<TalkingSession | null>(null);
  const [isRendering, setIsRendering] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterCategory, setFilterCategory] = useState('todas');
  const [filterGender, setFilterGender] = useState('todos');
  const [showPremiumOnly, setShowPremiumOnly] = useState(false);
  const [textToSpeak, setTextToSpeak] = useState('Ol√°! Eu sou seu novo avatar 3D falante. Posso ajudar a criar v√≠deos incr√≠veis para seus treinamentos.');
  const [voiceSettings, setVoiceSettings] = useState({
    speed: 1.0,
    pitch: 1.0,
    emotion: 'neutro',
    volume: 0.8
  });

  // 3D Controls
  const { 
    cameraDistance,
    lightIntensity,
    environmentPreset,
    animationSpeed 
  } = useControls({
    cameraDistance: { value: 5, min: 2, max: 15 },
    lightIntensity: { value: 1, min: 0, max: 3 },
    environmentPreset: { 
      value: 'studio', 
      options: ['studio', 'apartment', 'city', 'forest', 'sunset', 'dawn'] 
    },
    animationSpeed: { value: 1, min: 0.1, max: 2 }
  });

  const [avatars] = useState<Avatar3D[]>([
    // Avatares Profissionais
    {
      id: 'prof-001',
      name: 'Dr. Maria Santos',
      category: 'profissional',
      gender: 'feminino',
      ethnicity: 'latina',
      hairStyle: 'curto-profissional',
      clothing: 'blazer-azul',
      bodyType: 'medio',
      faceType: 'oval',
      expressions: ['neutro', 'sorriso', 'serio', 'explicativo'],
      languages: ['pt-BR', 'en-US', 'es-ES'],
      price: 0,
      premium: false,
      modelUrl: '/avatars/3d/prof-001.glb',
      textureUrl: '/avatars/textures/prof-001.jpg',
      animationsUrl: '/avatars/animations/prof-001.fbx',
      preview: 'https://cdn.abacus.ai/images/bbd640a3-ad6b-4955-bd13-848400d9e16c.png',
      stats: { downloads: 2847, rating: 4.8, reviews: 127 }
    },
    {
      id: 'prof-002',
      name: 'Eng. Carlos Oliveira',
      category: 'especialista',
      gender: 'masculino',
      ethnicity: 'latino',
      hairStyle: 'curto-executivo',
      clothing: 'camisa-social',
      bodyType: 'atletico',
      faceType: 'retangular',
      expressions: ['neutro', 'confiante', 'explicativo', 'alerta'],
      languages: ['pt-BR', 'en-US'],
      price: 0,
      premium: false,
      modelUrl: '/avatars/3d/prof-002.glb',
      textureUrl: '/avatars/textures/prof-002.jpg',
      animationsUrl: '/avatars/animations/prof-002.fbx',
      preview: 'https://cdn.abacus.ai/images/160c6911-66e4-4571-a6bc-10a4383ecf3b.png',
      stats: { downloads: 1923, rating: 4.9, reviews: 89 }
    },
    {
      id: 'inst-001',
      name: 'Instrutor Ana Costa',
      category: 'instrutor',
      gender: 'feminino',
      ethnicity: 'brasileira',
      hairStyle: 'medio-ondulado',
      clothing: 'uniforme-seguranca',
      bodyType: 'medio',
      faceType: 'redondo',
      expressions: ['amigavel', 'ensino', 'cuidado', 'alerta'],
      languages: ['pt-BR'],
      price: 15,
      premium: true,
      modelUrl: '/avatars/3d/inst-001.glb',
      textureUrl: '/avatars/textures/inst-001.jpg',
      animationsUrl: '/avatars/animations/inst-001.fbx',
      preview: 'https://cdn.abacus.ai/images/925f1fa7-d35d-46c9-8743-4dab6291ca02.png',
      stats: { downloads: 567, rating: 5.0, reviews: 43 }
    },
    {
      id: 'spec-001',
      name: 'Especialista Jo√£o Silva',
      category: 'especialista',
      gender: 'masculino',
      ethnicity: 'brasileiro',
      hairStyle: 'curto-moderno',
      clothing: 'jaleco-branco',
      bodyType: 'magro',
      faceType: 'oval',
      expressions: ['cientifico', 'explicativo', 'concentrado', 'satisfeito'],
      languages: ['pt-BR', 'en-US', 'fr-FR'],
      price: 25,
      premium: true,
      modelUrl: '/avatars/3d/spec-001.glb',
      textureUrl: '/avatars/textures/spec-001.jpg',
      animationsUrl: '/avatars/animations/spec-001.fbx',
      preview: 'https://cdn.abacus.ai/images/95852175-d4cd-49d2-892a-07f891e1b3a5.png',
      stats: { downloads: 834, rating: 4.7, reviews: 67 }
    },
    {
      id: 'cas-001',
      name: 'Amanda Ferreira',
      category: 'casual',
      gender: 'feminino',
      ethnicity: 'brasileira',
      hairStyle: 'longo-liso',
      clothing: 'blusa-casual',
      bodyType: 'medio',
      faceType: 'oval',
      expressions: ['amigavel', 'animado', 'surpreso', 'pensativo'],
      languages: ['pt-BR', 'en-US'],
      price: 10,
      premium: true,
      modelUrl: '/avatars/3d/cas-001.glb',
      textureUrl: '/avatars/textures/cas-001.jpg',
      animationsUrl: '/avatars/animations/cas-001.fbx',
      preview: 'https://cdn.abacus.ai/images/56e996dc-b06b-4969-b398-c5f6ed3facee.png',
      stats: { downloads: 1234, rating: 4.6, reviews: 98 }
    }
  ]);

  const filteredAvatars = avatars.filter(avatar => {
    const matchesSearch = avatar.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         avatar.category.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesCategory = filterCategory === 'todas' || avatar.category === filterCategory;
    const matchesGender = filterGender === 'todos' || avatar.gender === filterGender;
    const matchesPremium = !showPremiumOnly || avatar.premium;

    return matchesSearch && matchesCategory && matchesGender && matchesPremium;
  });

  const handleAvatarSelect = (avatar: Avatar3D) => {
    setSelectedAvatar(avatar);
    toast.success(`Avatar ${avatar.name} selecionado!`);
  };

  const handleStartTalking = async () => {
    if (!selectedAvatar || !textToSpeak.trim()) {
      toast.error('Selecione um avatar e digite o texto');
      return;
    }

    setIsRendering(true);
    try {
      // Simular API de gera√ß√£o de fala + sincroniza√ß√£o labial
      const response = await fetch('/api/v4/avatars/speak', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          avatarId: selectedAvatar.id,
          text: textToSpeak,
          voiceSettings,
          lipSyncEnabled: true,
          expressionsEnabled: true
        }),
      });

      const data = await response.json();
      
      if (data.success) {
        setTalkingSession({
          id: data.sessionId,
          text: textToSpeak,
          voice: data.voiceId,
          avatar: selectedAvatar.id,
          speed: voiceSettings.speed,
          emotion: voiceSettings.emotion,
          duration: data.duration,
          isPlaying: true,
          audioUrl: data.audioUrl
        });
        toast.success('Avatar come√ßou a falar!');
      } else {
        throw new Error(data.error);
      }
    } catch (error) {
      console.error('Erro ao gerar fala:', error);
      toast.error('Erro ao gerar fala do avatar');
    } finally {
      setIsRendering(false);
    }
  };

  const handleStopTalking = () => {
    if (talkingSession) {
      setTalkingSession(prev => prev ? { ...prev, isPlaying: false } : null);
      toast.success('Fala interrompida');
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-blue-50 to-pink-50 dark:from-gray-950 dark:via-purple-950 dark:to-blue-950">
      <div className="container mx-auto p-6 space-y-8">
        {/* Header */}
        <div className="text-center space-y-4">
          <div className="flex items-center justify-center space-x-3">
            <PersonStanding className="h-8 w-8 text-purple-600" />
            <h1 className="text-4xl font-bold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent">
              Avatares 3D Falantes
            </h1>
            <Sparkles className="h-8 w-8 text-pink-600" />
          </div>
          <p className="text-lg text-gray-600 max-w-3xl mx-auto">
            Biblioteca avan√ßada de avatares 3D realistas com sincroniza√ß√£o labial autom√°tica, 
            express√µes faciais naturais e movimentos corporais para seus v√≠deos de treinamento
          </p>
          <div className="flex items-center justify-center space-x-6">
            <Badge className="bg-purple-100 text-purple-800 px-3 py-1">
              50+ Avatares Dispon√≠veis
            </Badge>
            <Badge className="bg-blue-100 text-blue-800 px-3 py-1">
              Sincroniza√ß√£o Labial Real-time
            </Badge>
            <Badge className="bg-pink-100 text-pink-800 px-3 py-1">
              Express√µes Naturais
            </Badge>
          </div>
        </div>

        <Tabs defaultValue="gallery" className="space-y-6">
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="gallery">Galeria</TabsTrigger>
            <TabsTrigger value="customizer">Personalizar</TabsTrigger>
            <TabsTrigger value="integration">Integra√ß√£o</TabsTrigger>
            <TabsTrigger value="studio">Est√∫dio 3D</TabsTrigger>
          </TabsList>

          <TabsContent value="gallery">
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
              {/* Avatar Gallery */}
              <div className="lg:col-span-2 space-y-6">
                {/* Filtros */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center space-x-2">
                      <Target className="h-5 w-5" />
                      <span>Filtros de Avatares</span>
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                      <Input
                        placeholder="Buscar avatar..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                        className="flex-1"
                      />
                      <Select value={filterCategory} onValueChange={setFilterCategory}>
                        <SelectTrigger>
                          <SelectValue placeholder="Categoria" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="todas">Todas Categorias</SelectItem>
                          <SelectItem value="profissional">Profissional</SelectItem>
                          <SelectItem value="casual">Casual</SelectItem>
                          <SelectItem value="especialista">Especialista</SelectItem>
                          <SelectItem value="instrutor">Instrutor</SelectItem>
                        </SelectContent>
                      </Select>
                      <Select value={filterGender} onValueChange={setFilterGender}>
                        <SelectTrigger>
                          <SelectValue placeholder="G√™nero" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="todos">Todos G√™neros</SelectItem>
                          <SelectItem value="masculino">Masculino</SelectItem>
                          <SelectItem value="feminino">Feminino</SelectItem>
                          <SelectItem value="neutro">Neutro</SelectItem>
                        </SelectContent>
                      </Select>
                      <Button
                        variant={showPremiumOnly ? "default" : "outline"}
                        onClick={() => setShowPremiumOnly(!showPremiumOnly)}
                        className="flex items-center space-x-2"
                      >
                        <Crown className="h-4 w-4" />
                        <span>Premium</span>
                      </Button>
                    </div>
                  </CardContent>
                </Card>

                {/* Gallery */}
                <AvatarGallery
                  avatars={filteredAvatars}
                  selectedAvatar={selectedAvatar}
                  onAvatarSelect={handleAvatarSelect}
                />
              </div>

          {/* Avatar Preview & Controls */}
          <div className="space-y-6">
            {/* 3D Preview */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <Eye className="h-5 w-5" />
                  <span>Preview 3D</span>
                  {selectedAvatar && (
                    <Badge className="bg-green-100 text-green-800">
                      {selectedAvatar.name}
                    </Badge>
                  )}
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="relative h-96 rounded-lg overflow-hidden bg-gradient-to-b from-gray-100 to-gray-200">
                  <Suspense fallback={
                    <div className="flex items-center justify-center h-full">
                      <div className="text-center space-y-3">
                        <RefreshCw className="h-8 w-8 animate-spin text-purple-600 mx-auto" />
                        <p className="text-sm text-gray-600">Carregando Avatar 3D...</p>
                      </div>
                    </div>
                  }>
                    <Canvas>
                      <PerspectiveCamera makeDefault position={[0, 0, cameraDistance]} />
                      <Environment preset={environmentPreset as any} />
                      <ambientLight intensity={0.4} />
                      <directionalLight position={[5, 5, 5]} intensity={lightIntensity} />
                      
                      <Float speed={animationSpeed * 0.5} rotationIntensity={0.1} floatIntensity={0.2}>
                        <Avatar3DRenderer
                          avatar={selectedAvatar}
                          talkingSession={talkingSession}
                          animationSpeed={animationSpeed}
                        />
                      </Float>
                      
                      <OrbitControls
                        enablePan={false}
                        enableZoom={true}
                        enableRotate={true}
                        maxDistance={15}
                        minDistance={2}
                      />
                    </Canvas>
                  </Suspense>
                  
                  {/* 3D Controls Overlay */}
                  <div className="absolute top-4 right-4">
                    <div className="bg-white/90 backdrop-blur rounded-lg p-2">
                      <Leva hidden={false} collapsed={true} />
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Voice & Text Controls */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <Mic className="h-5 w-5" />
                  <span>Controles de Fala</span>
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-3">
                  <label className="text-sm font-medium">Texto para Fala</label>
                  <textarea
                    value={textToSpeak}
                    onChange={(e) => setTextToSpeak(e.target.value)}
                    className="w-full h-24 p-3 border rounded-lg resize-none"
                    placeholder="Digite o texto que o avatar deve falar..."
                  />
                  <div className="text-xs text-gray-500">
                    {textToSpeak.length} caracteres ‚Ä¢ ~{Math.ceil(textToSpeak.length / 15)} segundos
                  </div>
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <label className="text-sm font-medium">Velocidade</label>
                    <Slider
                      value={[voiceSettings.speed]}
                      onValueChange={([value]) => setVoiceSettings(prev => ({ ...prev, speed: value }))}
                      min={0.5}
                      max={2.0}
                      step={0.1}
                      className="w-full"
                    />
                    <div className="text-xs text-gray-500 text-center">{voiceSettings.speed.toFixed(1)}x</div>
                  </div>
                  <div className="space-y-2">
                    <label className="text-sm font-medium">Volume</label>
                    <Slider
                      value={[voiceSettings.volume]}
                      onValueChange={([value]) => setVoiceSettings(prev => ({ ...prev, volume: value }))}
                      min={0.0}
                      max={1.0}
                      step={0.1}
                      className="w-full"
                    />
                    <div className="text-xs text-gray-500 text-center">{Math.round(voiceSettings.volume * 100)}%</div>
                  </div>
                </div>

                <div className="space-y-2">
                  <label className="text-sm font-medium">Emo√ß√£o</label>
                  <Select value={voiceSettings.emotion} onValueChange={(value) => setVoiceSettings(prev => ({ ...prev, emotion: value }))}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="neutro">Neutro</SelectItem>
                      <SelectItem value="amigavel">Amig√°vel</SelectItem>
                      <SelectItem value="profissional">Profissional</SelectItem>
                      <SelectItem value="entusiasmado">Entusiasmado</SelectItem>
                      <SelectItem value="serio">S√©rio</SelectItem>
                      <SelectItem value="cuidadoso">Cuidadoso</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="flex space-x-2">
                  <Button
                    onClick={handleStartTalking}
                    disabled={!selectedAvatar || isRendering || talkingSession?.isPlaying}
                    className="flex-1 flex items-center space-x-2"
                  >
                    {isRendering ? (
                      <RefreshCw className="h-4 w-4 animate-spin" />
                    ) : talkingSession?.isPlaying ? (
                      <Volume2 className="h-4 w-4" />
                    ) : (
                      <Play className="h-4 w-4" />
                    )}
                    <span>
                      {isRendering ? 'Processando...' : 
                       talkingSession?.isPlaying ? 'Falando...' : 'Falar'}
                    </span>
                  </Button>
                  {talkingSession?.isPlaying && (
                    <Button
                      variant="outline"
                      onClick={handleStopTalking}
                      className="flex items-center space-x-2"
                    >
                      <Pause className="h-4 w-4" />
                    </Button>
                  )}
                </div>
              </CardContent>
            </Card>

            {/* Session Info */}
            {talkingSession && (
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2">
                    <Activity className="h-5 w-5" />
                    <span>Sess√£o Ativa</span>
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  <div className="space-y-2">
                    <div className="flex justify-between text-sm">
                      <span>Avatar:</span>
                      <span className="font-medium">{selectedAvatar?.name}</span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span>Dura√ß√£o:</span>
                      <span className="font-medium">{talkingSession.duration}s</span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span>Emo√ß√£o:</span>
                      <span className="font-medium capitalize">{talkingSession.emotion}</span>
                    </div>
                  </div>
                  <Progress value={talkingSession.isPlaying ? 65 : 0} className="w-full" />
                  <LipSyncController session={talkingSession} />
                </CardContent>
              </Card>
            )}

              {/* Voice Analyzer */}
              {talkingSession?.isPlaying && (
                <VoiceAnalyzer session={talkingSession} />
              )}
            </div>
          </div>
        </TabsContent>

        <TabsContent value="customizer">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <AvatarCustomizer
              avatar={selectedAvatar}
              onCustomizationChange={(customization) => {
                // Atualizar preview em tempo real
                console.log('Customiza√ß√£o atualizada:', customization);
              }}
              onSaveCustomization={async () => {
                // Salvar customiza√ß√£o
                await new Promise(resolve => setTimeout(resolve, 1000));
              }}
            />
            
            <div className="space-y-6">
              {/* 3D Preview para Customiza√ß√£o */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2">
                    <Palette className="h-5 w-5" />
                    <span>Preview Personaliza√ß√£o</span>
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="relative h-96 rounded-lg overflow-hidden bg-gradient-to-b from-purple-100 to-pink-100">
                    <Suspense fallback={
                      <div className="flex items-center justify-center h-full">
                        <div className="text-center space-y-3">
                          <RefreshCw className="h-8 w-8 animate-spin text-purple-600 mx-auto" />
                          <p className="text-sm text-gray-600">Aplicando Personaliza√ß√£o...</p>
                        </div>
                      </div>
                    }>
                      <Canvas>
                        <PerspectiveCamera makeDefault position={[0, 0, 4]} />
                        <Environment preset="studio" />
                        <ambientLight intensity={0.6} />
                        <directionalLight position={[3, 3, 3]} intensity={1.2} />
                        
                        <Float speed={0.8} rotationIntensity={0.1} floatIntensity={0.1}>
                          <Avatar3DRenderer
                            avatar={selectedAvatar}
                            talkingSession={null}
                            animationSpeed={1}
                          />
                        </Float>
                        
                        <OrbitControls enablePan={false} />
                      </Canvas>
                    </Suspense>
                  </div>
                </CardContent>
              </Card>

              {/* Quick Actions */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2">
                    <Zap className="h-5 w-5" />
                    <span>A√ß√µes R√°pidas</span>
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  <Button className="w-full flex items-center space-x-2">
                    <Download className="h-4 w-4" />
                    <span>Exportar Avatar Personalizado</span>
                  </Button>
                  <Button variant="outline" className="w-full flex items-center space-x-2">
                    <RefreshCw className="h-4 w-4" />
                    <span>Resetar Personaliza√ß√£o</span>
                  </Button>
                  <Button variant="outline" className="w-full flex items-center space-x-2">
                    <Crown className="h-4 w-4" />
                    <span>Upgrade para Premium</span>
                  </Button>
                </CardContent>
              </Card>
            </div>
          </div>
        </TabsContent>

        <TabsContent value="integration">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <AvatarIntegration
              onAvatarImported={(avatar) => {
                setSelectedAvatar(avatar);
                toast.success(`Avatar ${avatar.name} importado!`);
              }}
            />
            
            <div className="space-y-6">
              {/* Integration Stats */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2">
                    <Brain className="h-5 w-5" />
                    <span>Status das Integra√ß√µes</span>
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-3">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-2">
                        <div className="w-3 h-3 bg-green-500 rounded-full"></div>
                        <span className="text-sm">Ready Player Me</span>
                      </div>
                      <Badge className="bg-green-100 text-green-800">Conectado</Badge>
                    </div>
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-2">
                        <div className="w-3 h-3 bg-blue-500 rounded-full"></div>
                        <span className="text-sm">Upload Customizado</span>
                      </div>
                      <Badge className="bg-blue-100 text-blue-800">Ativo</Badge>
                    </div>
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-2">
                        <div className="w-3 h-3 bg-gray-400 rounded-full"></div>
                        <span className="text-sm">VRoid Studio</span>
                      </div>
                      <Badge className="bg-gray-100 text-gray-800">Aguardando</Badge>
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* Recent Imports */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2">
                    <Upload className="h-5 w-5" />
                    <span>Importa√ß√µes Recentes</span>
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    <div className="flex items-center space-x-3 p-3 border rounded-lg">
                      <div className="w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center">
                        <User className="h-6 w-6 text-purple-600" />
                      </div>
                      <div className="flex-1">
                        <div className="font-medium">Avatar RPM-2024</div>
                        <div className="text-xs text-gray-500">Importado h√° 2 horas</div>
                      </div>
                      <Badge className="bg-green-100 text-green-800">Sucesso</Badge>
                    </div>
                    <div className="flex items-center space-x-3 p-3 border rounded-lg">
                      <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
                        <User className="h-6 w-6 text-blue-600" />
                      </div>
                      <div className="flex-1">
                        <div className="font-medium">Custom-Business</div>
                        <div className="text-xs text-gray-500">Importado ontem</div>
                      </div>
                      <Badge className="bg-green-100 text-green-800">Sucesso</Badge>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        </TabsContent>

        <TabsContent value="studio">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            {/* Est√∫dio 3D Completo */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <Eye className="h-5 w-5" />
                  <span>Est√∫dio 3D Completo</span>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="relative h-[500px] rounded-lg overflow-hidden bg-gradient-to-b from-gray-900 to-black">
                  <Suspense fallback={
                    <div className="flex items-center justify-center h-full">
                      <div className="text-center space-y-3">
                        <RefreshCw className="h-8 w-8 animate-spin text-white mx-auto" />
                        <p className="text-sm text-white">Carregando Est√∫dio 3D...</p>
                      </div>
                    </div>
                  }>
                    <Canvas camera={{ position: [0, 1, 5], fov: 50 }}>
                      <Environment preset="night" />
                      <ambientLight intensity={0.3} />
                      <directionalLight position={[5, 5, 5]} intensity={1} />
                      <spotLight position={[0, 5, 0]} intensity={0.8} />
                      
                      {/* Cen√°rio do est√∫dio */}
                      <mesh position={[0, -2, 0]} rotation={[-Math.PI / 2, 0, 0]}>
                        <planeGeometry args={[20, 20]} />
                        <meshStandardMaterial color="#1a1a1a" />
                      </mesh>
                      
                      <Float speed={1} rotationIntensity={0.1} floatIntensity={0.1}>
                        <Avatar3DRenderer
                          avatar={selectedAvatar}
                          talkingSession={talkingSession}
                          animationSpeed={1}
                        />
                      </Float>
                      
                      <OrbitControls 
                        enablePan={true}
                        enableZoom={true}
                        enableRotate={true}
                        maxDistance={20}
                        minDistance={1}
                      />
                    </Canvas>
                  </Suspense>
                  
                  {/* Controles do Est√∫dio */}
                  <div className="absolute bottom-4 left-4 right-4">
                    <div className="bg-black/70 backdrop-blur rounded-lg p-4">
                      <div className="grid grid-cols-3 gap-4 text-white text-center">
                        <div>
                          <div className="text-sm font-medium">Lighting</div>
                          <div className="text-xs text-gray-300">Studio</div>
                        </div>
                        <div>
                          <div className="text-sm font-medium">Camera</div>
                          <div className="text-xs text-gray-300">Portrait</div>
                        </div>
                        <div>
                          <div className="text-sm font-medium">Animation</div>
                          <div className="text-xs text-gray-300">{talkingSession?.isPlaying ? 'Speaking' : 'Idle'}</div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Studio Controls */}
            <div className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2">
                    <Settings className="h-5 w-5" />
                    <span>Controles do Est√∫dio</span>
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-3">
                    <div className="space-y-2">
                      <label className="text-sm font-medium">Ambiente</label>
                      <Select defaultValue="studio">
                        <SelectTrigger>
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="studio">Est√∫dio</SelectItem>
                          <SelectItem value="office">Escrit√≥rio</SelectItem>
                          <SelectItem value="classroom">Sala de Aula</SelectItem>
                          <SelectItem value="factory">F√°brica</SelectItem>
                          <SelectItem value="outdoor">Ao Ar Livre</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>

                    <div className="space-y-2">
                      <label className="text-sm font-medium">Ilumina√ß√£o</label>
                      <Select defaultValue="professional">
                        <SelectTrigger>
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="natural">Natural</SelectItem>
                          <SelectItem value="professional">Profissional</SelectItem>
                          <SelectItem value="dramatic">Dram√°tica</SelectItem>
                          <SelectItem value="soft">Suave</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>

                    <div className="space-y-2">
                      <label className="text-sm font-medium">Posi√ß√£o da C√¢mera</label>
                      <Select defaultValue="medium">
                        <SelectTrigger>
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="close">Close-up</SelectItem>
                          <SelectItem value="medium">M√©dio</SelectItem>
                          <SelectItem value="full">Corpo Inteiro</SelectItem>
                          <SelectItem value="wide">Plano Geral</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>

                  <div className="flex space-x-2 pt-4 border-t">
                    <Button className="flex-1 flex items-center space-x-2">
                      <Download className="h-4 w-4" />
                      <span>Capturar Frame</span>
                    </Button>
                    <Button variant="outline" className="flex items-center space-x-2">
                      <Settings className="h-4 w-4" />
                    </Button>
                  </div>
                </CardContent>
              </Card>

              {/* Performance */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2">
                    <Activity className="h-5 w-5" />
                    <span>Performance 3D</span>
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  <div className="grid grid-cols-2 gap-4 text-center">
                    <div>
                      <div className="text-lg font-bold text-green-600">60</div>
                      <div className="text-xs text-gray-600">FPS</div>
                    </div>
                    <div>
                      <div className="text-lg font-bold text-blue-600">2.3</div>
                      <div className="text-xs text-gray-600">GB RAM</div>
                    </div>
                    <div>
                      <div className="text-lg font-bold text-purple-600">45k</div>
                      <div className="text-xs text-gray-600">Pol√≠gonos</div>
                    </div>
                    <div>
                      <div className="text-lg font-bold text-orange-600">8ms</div>
                      <div className="text-xs text-gray-600">Render</div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        </TabsContent>

        <TabsContent value="integration">
          <AvatarIntegration
            onAvatarImported={(avatar) => {
              setSelectedAvatar(avatar);
              toast.success(`Avatar ${avatar.name} importado com sucesso!`);
            }}
          />
        </TabsContent>
      </Tabs>

        {/* Stats Dashboard */}
        <div className="grid grid-cols-2 md:grid-cols-6 gap-4">
          <div className="text-center p-4 bg-white/80 rounded-lg">
            <div className="text-2xl font-bold text-purple-600">{avatars.length}</div>
            <div className="text-xs text-gray-600">Avatares Total</div>
          </div>
          <div className="text-center p-4 bg-white/80 rounded-lg">
            <div className="text-2xl font-bold text-blue-600">{avatars.filter(a => a.premium).length}</div>
            <div className="text-xs text-gray-600">Premium</div>
          </div>
          <div className="text-center p-4 bg-white/80 rounded-lg">
            <div className="text-2xl font-bold text-pink-600">{avatars.filter(a => a.gender === 'feminino').length}</div>
            <div className="text-xs text-gray-600">Femininos</div>
          </div>
          <div className="text-center p-4 bg-white/80 rounded-lg">
            <div className="text-2xl font-bold text-green-600">{avatars.filter(a => a.gender === 'masculino').length}</div>
            <div className="text-xs text-gray-600">Masculinos</div>
          </div>
          <div className="text-center p-4 bg-white/80 rounded-lg">
            <div className="text-2xl font-bold text-orange-600">24</div>
            <div className="text-xs text-gray-600">Express√µes</div>
          </div>
          <div className="text-center p-4 bg-white/80 rounded-lg">
            <div className="text-2xl font-bold text-violet-600">12</div>
            <div className="text-xs text-gray-600">Idiomas</div>
          </div>
        </div>
      </div>
    </div>
  );
}
