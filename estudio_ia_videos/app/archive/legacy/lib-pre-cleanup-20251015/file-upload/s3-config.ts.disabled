
import { S3Client, PutObjectCommand, GetObjectCommand, DeleteObjectCommand } from '@aws-sdk/client-s3'
import { getSignedUrl } from '@aws-sdk/s3-request-presigner'

const s3Client = new S3Client({
  region: process.env.AWS_REGION || 'us-east-1',
  credentials: {
    accessKeyId: process.env.AWS_ACCESS_KEY_ID || '',
    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY || '',
  },
})

const BUCKET_NAME = process.env.AWS_BUCKET_NAME || 'estudio-ia-videos'
const FOLDER_PREFIX = process.env.AWS_FOLDER_PREFIX || 'uploads'

export interface UploadResult {
  key: string
  url: string
  size: number
  mimeType: string
}

export async function uploadFileToS3(
  file: Buffer | Uint8Array,
  fileName: string,
  mimeType: string,
  folder = 'general'
): Promise<UploadResult> {
  const key = `${FOLDER_PREFIX}/${folder}/${Date.now()}-${fileName}`
  
  const command = new PutObjectCommand({
    Bucket: BUCKET_NAME,
    Key: key,
    Body: file,
    ContentType: mimeType,
  })

  try {
    await s3Client.send(command)
    
    const url = `https://${BUCKET_NAME}.s3.amazonaws.com/${key}`
    
    return {
      key,
      url,
      size: file.byteLength,
      mimeType,
    }
  } catch (error) {
    console.error('Error uploading to S3:', error)
    throw new Error('Failed to upload file')
  }
}

export async function getSignedDownloadUrl(key: string): Promise<string> {
  const command = new GetObjectCommand({
    Bucket: BUCKET_NAME,
    Key: key,
  })

  try {
    const url = await getSignedUrl(s3Client, command, { expiresIn: 3600 })
    return url
  } catch (error) {
    console.error('Error getting signed URL:', error)
    throw new Error('Failed to get download URL')
  }
}

export async function deleteFileFromS3(key: string): Promise<void> {
  const command = new DeleteObjectCommand({
    Bucket: BUCKET_NAME,
    Key: key,
  })

  try {
    await s3Client.send(command)
  } catch (error) {
    console.error('Error deleting from S3:', error)
    throw new Error('Failed to delete file')
  }
}

export { s3Client, BUCKET_NAME, FOLDER_PREFIX }
