
'use client'

/**
 * üì§ Upload PPTX - Interface Estilo Animaker
 * P√°gina de upload com preview e configura√ß√µes avan√ßadas
 */

import React, { useState, useCallback } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Progress } from '@/components/ui/progress'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Switch } from '@/components/ui/switch'
import { Label } from '@/components/ui/label'
import { toast } from 'react-hot-toast'
// Using native file input for compatibility
import { 
  Upload, 
  FileText, 
  CheckCircle, 
  AlertTriangle,
  Play,
  Settings,
  Sparkles,
  Clock,
  BarChart3,
  ArrowLeft,
  Eye,
  Edit3,
  Download,
  Mic,
  User,
  Palette,
  Zap
} from 'lucide-react'
import Link from 'next/link'
import { useRouter } from 'next/navigation'

interface UploadStep {
  id: string
  name: string
  status: 'pending' | 'processing' | 'completed' | 'error'
  progress: number
}

interface PPTXAnalysis {
  totalSlides: number
  estimatedDuration: number
  contentTypes: string[]
  suggestedTemplate: string
  processingEstimate: number
}

export default function PPTXUploadPage() {
  const router = useRouter()
  const [currentStep, setCurrentStep] = useState(1)
  const [file, setFile] = useState<File | null>(null)
  const [uploadProgress, setUploadProgress] = useState(0)
  const [analysis, setAnalysis] = useState<PPTXAnalysis | null>(null)
  const [isAnalyzing, setIsAnalyzing] = useState(false)
  const [uploadSteps, setUploadSteps] = useState<UploadStep[]>([])
  
  // Configuration
  const [config, setConfig] = useState({
    template: 'corporate_clean',
    voiceId: 'pt-BR-clara',
    includeAnimations: true,
    generateNarration: true,
    addBackground: true,
    enableTransitions: true,
    quality: 'high',
    format: 'mp4'
  })

  // File input handler
  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files
    if (files && files.length > 0) {
      const file = files[0]
      
      // Validate file
      if (!file.name.toLowerCase().endsWith('.pptx') && !file.name.toLowerCase().endsWith('.ppt')) {
        toast.error('‚ùå Arquivo deve ser PPTX ou PPT')
        return
      }
      
      if (file.size > 50 * 1024 * 1024) {
        toast.error('‚ùå Arquivo muito grande. M√°ximo 50MB')
        return
      }
      
      setFile(file)
      startAnalysis(file)
    }
  }

  const startAnalysis = async (file: File) => {
    setIsAnalyzing(true)
    setCurrentStep(2)
    
    // Initialize upload steps
    const steps: UploadStep[] = [
      { id: 'upload', name: 'Upload arquivo', status: 'completed', progress: 100 },
      { id: 'parse', name: 'Analisar PPTX', status: 'processing', progress: 0 },
      { id: 'extract', name: 'Extrair conte√∫do', status: 'pending', progress: 0 },
      { id: 'optimize', name: 'Otimizar para v√≠deo', status: 'pending', progress: 0 },
      { id: 'preview', name: 'Gerar preview', status: 'pending', progress: 0 }
    ]
    setUploadSteps(steps)

    try {
      // Simulate upload with FormData
      const formData = new FormData()
      formData.append('file', file)

      // Mock progress updates
      for (let i = 0; i < steps.length; i++) {
        await new Promise(resolve => setTimeout(resolve, 1500))
        
        setUploadSteps(prev => prev.map((step, index) => {
          if (index === i) {
            return { ...step, status: 'processing', progress: 50 }
          }
          return step
        }))

        await new Promise(resolve => setTimeout(resolve, 1000))
        
        setUploadSteps(prev => prev.map((step, index) => {
          if (index === i) {
            return { ...step, status: 'completed', progress: 100 }
          }
          if (index === i + 1) {
            return { ...step, status: 'processing', progress: 0 }
          }
          return step
        }))
      }

      // Mock API call result
      const mockAnalysis: PPTXAnalysis = {
        totalSlides: Math.floor(Math.random() * 15) + 8,
        estimatedDuration: Math.floor(Math.random() * 300) + 180,
        contentTypes: ['text', 'images', 'charts', 'bullet-points'],
        suggestedTemplate: 'safety_industrial',
        processingEstimate: Math.floor(Math.random() * 120) + 90
      }

      setAnalysis(mockAnalysis)
      setCurrentStep(3)
      toast.success('‚úÖ An√°lise PPTX conclu√≠da!')

    } catch (error) {
      console.error('Upload error:', error)
      toast.error('‚ùå Erro no upload do arquivo')
      setUploadSteps(prev => prev.map(step => 
        step.status === 'processing' 
          ? { ...step, status: 'error', progress: 0 }
          : step
      ))
    } finally {
      setIsAnalyzing(false)
    }
  }

  const handleStartEditing = () => {
    toast.success('üé¨ Abrindo Editor Estilo Animaker...')
    router.push('/pptx-editor')
  }

  const handleQuickGenerate = async () => {
    toast.success('‚ö° Gera√ß√£o r√°pida iniciada!')
    setCurrentStep(4)
    
    // Simulate quick generation
    for (let progress = 0; progress <= 100; progress += 5) {
      await new Promise(resolve => setTimeout(resolve, 200))
      setUploadProgress(progress)
    }
    
    toast.success('üéâ V√≠deo gerado com sucesso!')
    router.push('/dashboard')
  }

  const getStepIcon = (status: UploadStep['status']) => {
    switch (status) {
      case 'completed': return <CheckCircle className="h-4 w-4 text-green-500" />
      case 'processing': return <div className="h-4 w-4 border-2 border-blue-500 border-t-transparent rounded-full animate-spin" />
      case 'error': return <AlertTriangle className="h-4 w-4 text-red-500" />
      default: return <div className="h-4 w-4 border-2 border-gray-400 rounded-full" />
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 p-4">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <Link href="/">
                <Button variant="outline" size="sm">
                  <ArrowLeft className="h-4 w-4 mr-2" />
                  Voltar
                </Button>
              </Link>
              <div>
                <h1 className="text-3xl font-bold text-gray-900 flex items-center">
                  <Upload className="h-8 w-8 mr-3 text-blue-600" />
                  Upload PPTX
                </h1>
                <p className="text-gray-600 mt-2">
                  Converta PowerPoint em v√≠deos com editor estilo Animaker
                </p>
              </div>
            </div>
            
            <Badge variant="secondary" className="bg-blue-100 text-blue-700">
              üöÄ Powered by Animaker Engine
            </Badge>
          </div>
        </div>

        <div className="grid lg:grid-cols-3 gap-8">
          {/* Main Upload Area */}
          <div className="lg:col-span-2 space-y-6">
            {/* Step 1: Upload */}
            {currentStep === 1 && (
              <Card className="border-2 border-dashed border-blue-300">
                <CardContent className="p-8">
                  <div 
                    {...getRootProps()}
                    className={`text-center cursor-pointer transition-colors ${
                      isDragActive ? 'bg-blue-50' : 'hover:bg-gray-50'
                    }`}
                  >
                    <input {...getInputProps()} />
                    
                    <div className="space-y-4">
                      <div className="mx-auto w-24 h-24 bg-blue-100 rounded-full flex items-center justify-center">
                        <Upload className="h-12 w-12 text-blue-600" />
                      </div>
                      
                      <div>
                        <h3 className="text-xl font-semibold text-gray-900 mb-2">
                          {isDragActive ? 'Solte o arquivo aqui' : 'Arraste seu PPTX aqui'}
                        </h3>
                        <p className="text-gray-600 mb-4">
                          ou clique para selecionar arquivo
                        </p>
                        <Badge variant="outline" className="text-sm">
                          M√°ximo 50MB ‚Ä¢ Formato .pptx
                        </Badge>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            )}

            {/* Step 2: Analysis */}
            {currentStep === 2 && (
              <Card className="border-2 border-blue-300">
                <CardHeader>
                  <CardTitle className="flex items-center">
                    <BarChart3 className="h-5 w-5 mr-2 text-blue-600" />
                    Analisando PPTX
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {uploadSteps.map((step) => (
                      <div key={step.id} className="flex items-center space-x-3">
                        {getStepIcon(step.status)}
                        <div className="flex-1">
                          <div className="flex items-center justify-between">
                            <span className="text-sm font-medium">{step.name}</span>
                            <span className="text-xs text-gray-500">{step.progress}%</span>
                          </div>
                          {step.status === 'processing' && (
                            <Progress value={step.progress} className="mt-1" />
                          )}
                        </div>
                      </div>
                    ))}
                  </div>

                  {file && (
                    <div className="mt-6 p-4 bg-blue-50 rounded-lg">
                      <h4 className="font-medium text-gray-900 mb-2">üìÅ Arquivo Carregado</h4>
                      <div className="text-sm text-gray-600 space-y-1">
                        <p><strong>Nome:</strong> {file.name}</p>
                        <p><strong>Tamanho:</strong> {(file.size / (1024 * 1024)).toFixed(2)} MB</p>
                        <p><strong>Modificado:</strong> {new Date(file.lastModified).toLocaleDateString('pt-BR')}</p>
                      </div>
                    </div>
                  )}
                </CardContent>
              </Card>
            )}

            {/* Step 3: Configuration */}
            {currentStep === 3 && analysis && (
              <Card className="border-2 border-green-300">
                <CardHeader>
                  <CardTitle className="flex items-center">
                    <Settings className="h-5 w-5 mr-2 text-green-600" />
                    Configurar Gera√ß√£o
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  {/* Analysis Results */}
                  <div className="mb-6 p-4 bg-green-50 rounded-lg">
                    <h4 className="font-medium text-gray-900 mb-3">üìä An√°lise Completada</h4>
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                      <div className="text-center">
                        <div className="text-2xl font-bold text-blue-600">{analysis.totalSlides}</div>
                        <div className="text-gray-600">Slides</div>
                      </div>
                      <div className="text-center">
                        <div className="text-2xl font-bold text-green-600">
                          {Math.floor(analysis.estimatedDuration / 60)}:{(analysis.estimatedDuration % 60).toString().padStart(2, '0')}
                        </div>
                        <div className="text-gray-600">Dura√ß√£o</div>
                      </div>
                      <div className="text-center">
                        <div className="text-2xl font-bold text-purple-600">
                          {Math.floor(analysis.processingEstimate / 60)}min
                        </div>
                        <div className="text-gray-600">Processamento</div>
                      </div>
                      <div className="text-center">
                        <div className="text-2xl font-bold text-orange-600">IA</div>
                        <div className="text-gray-600">Gera√ß√£o</div>
                      </div>
                    </div>
                  </div>

                  {/* Configuration Tabs */}
                  <Tabs defaultValue="template" className="space-y-4">
                    <TabsList className="grid w-full grid-cols-4">
                      <TabsTrigger value="template">üé® Template</TabsTrigger>
                      <TabsTrigger value="voice">üé§ Voz</TabsTrigger>
                      <TabsTrigger value="effects">‚ú® Efeitos</TabsTrigger>
                      <TabsTrigger value="export">üì§ Export</TabsTrigger>
                    </TabsList>

                    <TabsContent value="template" className="space-y-4">
                      <div>
                        <Label>Template Recomendado</Label>
                        <Select value={config.template} onValueChange={(value) => setConfig(prev => ({ ...prev, template: value }))}>
                          <SelectTrigger className="mt-2">
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="corporate_clean">üè¢ Corporativo Limpo</SelectItem>
                            <SelectItem value="safety_industrial">‚ö†Ô∏è Seguran√ßa Industrial</SelectItem>
                            <SelectItem value="modern_tech">üíª Tecnologia Moderna</SelectItem>
                            <SelectItem value="medical_health">üè• M√©dico & Sa√∫de</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>

                      <div className="grid grid-cols-2 gap-4">
                        <div className="flex items-center space-x-2">
                          <Switch 
                            checked={config.includeAnimations}
                            onCheckedChange={(checked) => setConfig(prev => ({ ...prev, includeAnimations: checked }))}
                          />
                          <Label className="text-sm">Anima√ß√µes suaves</Label>
                        </div>
                        <div className="flex items-center space-x-2">
                          <Switch 
                            checked={config.enableTransitions}
                            onCheckedChange={(checked) => setConfig(prev => ({ ...prev, enableTransitions: checked }))}
                          />
                          <Label className="text-sm">Transi√ß√µes autom√°ticas</Label>
                        </div>
                      </div>
                    </TabsContent>

                    <TabsContent value="voice" className="space-y-4">
                      <div>
                        <Label>Voz para Narra√ß√£o</Label>
                        <Select value={config.voiceId} onValueChange={(value) => setConfig(prev => ({ ...prev, voiceId: value }))}>
                          <SelectTrigger className="mt-2">
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="pt-BR-clara">üë© Clara - Feminina Profissional</SelectItem>
                            <SelectItem value="pt-BR-ricardo">üë® Ricardo - Masculino Corporativo</SelectItem>
                            <SelectItem value="pt-BR-ana">üë©‚Äçüè´ Ana - Professora</SelectItem>
                            <SelectItem value="pt-BR-marcos">üë®‚Äçüíº Marcos - Executivo</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>

                      <div className="flex items-center space-x-2">
                        <Switch 
                          checked={config.generateNarration}
                          onCheckedChange={(checked) => setConfig(prev => ({ ...prev, generateNarration: checked }))}
                        />
                        <Label className="text-sm">Gerar narra√ß√£o autom√°tica</Label>
                      </div>

                      <Alert>
                        <Mic className="h-4 w-4" />
                        <AlertDescription>
                          A IA ir√° gerar narra√ß√£o natural baseada no conte√∫do dos slides
                        </AlertDescription>
                      </Alert>
                    </TabsContent>

                    <TabsContent value="effects" className="space-y-4">
                      <div className="grid grid-cols-2 gap-4">
                        <div className="flex items-center space-x-2">
                          <Switch 
                            checked={config.addBackground}
                            onCheckedChange={(checked) => setConfig(prev => ({ ...prev, addBackground: checked }))}
                          />
                          <Label className="text-sm">M√∫sica de fundo</Label>
                        </div>
                        <div>
                          <Label className="text-sm">Qualidade</Label>
                          <Select value={config.quality} onValueChange={(value) => setConfig(prev => ({ ...prev, quality: value }))}>
                            <SelectTrigger className="mt-1">
                              <SelectValue />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="high">üé¨ Alta (1080p)</SelectItem>
                              <SelectItem value="medium">üì± M√©dia (720p)</SelectItem>
                              <SelectItem value="low">‚ö° R√°pida (480p)</SelectItem>
                            </SelectContent>
                          </Select>
                        </div>
                      </div>

                      <Alert>
                        <Sparkles className="h-4 w-4" />
                        <AlertDescription>
                          40+ transi√ß√µes profissionais ser√£o aplicadas automaticamente
                        </AlertDescription>
                      </Alert>
                    </TabsContent>

                    <TabsContent value="export" className="space-y-4">
                      <div>
                        <Label>Formato de Sa√≠da</Label>
                        <Select value={config.format} onValueChange={(value) => setConfig(prev => ({ ...prev, format: value }))}>
                          <SelectTrigger className="mt-2">
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="mp4">üé¨ MP4 (Recomendado)</SelectItem>
                            <SelectItem value="webm">üåê WebM (Web)</SelectItem>
                            <SelectItem value="mov">üì± MOV (Apple)</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>

                      <Alert>
                        <Download className="h-4 w-4" />
                        <AlertDescription>
                          V√≠deo ser√° otimizado para m√°xima compatibilidade e qualidade
                        </AlertDescription>
                      </Alert>
                    </TabsContent>
                  </Tabs>

                  {/* Action Buttons */}
                  <div className="mt-8 flex space-x-4">
                    <Button 
                      className="flex-1 bg-blue-600 hover:bg-blue-700 h-12"
                      onClick={handleStartEditing}
                    >
                      <Edit3 className="h-4 w-4 mr-2" />
                      Abrir Editor Animaker
                    </Button>
                    <Button 
                      variant="outline" 
                      className="flex-1 h-12"
                      onClick={handleQuickGenerate}
                    >
                      <Zap className="h-4 w-4 mr-2" />
                      Gera√ß√£o R√°pida
                    </Button>
                  </div>
                </CardContent>
              </Card>
            )}

            {/* Step 4: Generation Progress */}
            {currentStep === 4 && (
              <Card className="border-2 border-purple-300">
                <CardHeader>
                  <CardTitle className="flex items-center">
                    <Sparkles className="h-5 w-5 mr-2 text-purple-600" />
                    Gerando V√≠deo
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <Progress value={uploadProgress} className="w-full" />
                    <div className="text-center">
                      <p className="text-lg font-medium text-gray-900">
                        {uploadProgress}% Conclu√≠do
                      </p>
                      <p className="text-sm text-gray-600">
                        Aplicando template e gerando narra√ß√£o...
                      </p>
                    </div>

                    {uploadProgress === 100 && (
                      <div className="text-center space-y-4">
                        <CheckCircle className="h-16 w-16 text-green-500 mx-auto" />
                        <h3 className="text-xl font-bold text-gray-900">
                          üéâ V√≠deo Gerado com Sucesso!
                        </h3>
                        <div className="flex space-x-3 justify-center">
                          <Button className="bg-green-600 hover:bg-green-700">
                            <Play className="h-4 w-4 mr-2" />
                            Visualizar
                          </Button>
                          <Button variant="outline">
                            <Download className="h-4 w-4 mr-2" />
                            Download
                          </Button>
                        </div>
                      </div>
                    )}
                  </div>
                </CardContent>
              </Card>
            )}
          </div>

          {/* Right Sidebar - Info & Features */}
          <div className="space-y-6">
            {/* Features Card */}
            <Card>
              <CardHeader>
                <CardTitle className="text-lg flex items-center">
                  <Sparkles className="h-5 w-5 mr-2 text-purple-600" />
                  Funcionalidades
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <div className="flex items-center space-x-2">
                  <CheckCircle className="h-4 w-4 text-green-500" />
                  <span className="text-sm">Editor Timeline Profissional</span>
                </div>
                <div className="flex items-center space-x-2">
                  <CheckCircle className="h-4 w-4 text-green-500" />
                  <span className="text-sm">40+ Transi√ß√µes Animaker</span>
                </div>
                <div className="flex items-center space-x-2">
                  <CheckCircle className="h-4 w-4 text-green-500" />
                  <span className="text-sm">TTS Portugu√™s Brasileiro</span>
                </div>
                <div className="flex items-center space-x-2">
                  <CheckCircle className="h-4 w-4 text-green-500" />
                  <span className="text-sm">Avatares 3D Falantes</span>
                </div>
                <div className="flex items-center space-x-2">
                  <CheckCircle className="h-4 w-4 text-green-500" />
                  <span className="text-sm">160M+ Assets Library</span>
                </div>
              </CardContent>
            </Card>

            {/* Templates Preview */}
            <Card>
              <CardHeader>
                <CardTitle className="text-lg flex items-center">
                  <Palette className="h-5 w-5 mr-2 text-indigo-600" />
                  Templates Dispon√≠veis
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                {[
                  { name: 'Corporativo', preview: 'üè¢', usage: '2.8K' },
                  { name: 'Seguran√ßa', preview: '‚ö†Ô∏è', usage: '1.5K' },
                  { name: 'Tecnologia', preview: 'üíª', usage: '890' },
                  { name: 'M√©dico', preview: 'üè•', usage: '1.2K' }
                ].map((template) => (
                  <div key={template.name} className="flex items-center justify-between">
                    <div className="flex items-center space-x-2">
                      <span className="text-xl">{template.preview}</span>
                      <span className="text-sm font-medium">{template.name}</span>
                    </div>
                    <Badge variant="outline" className="text-xs">
                      {template.usage} usos
                    </Badge>
                  </div>
                ))}
              </CardContent>
            </Card>

            {/* Quick Stats */}
            <Card>
              <CardHeader>
                <CardTitle className="text-lg flex items-center">
                  <BarChart3 className="h-5 w-5 mr-2 text-blue-600" />
                  Estat√≠sticas
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-3 text-sm">
                <div className="flex justify-between">
                  <span>V√≠deos criados hoje:</span>
                  <span className="font-bold">47</span>
                </div>
                <div className="flex justify-between">
                  <span>Tempo m√©dio:</span>
                  <span className="font-bold">3m 12s</span>
                </div>
                <div className="flex justify-between">
                  <span>Taxa de sucesso:</span>
                  <span className="font-bold text-green-600">98.7%</span>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  )
}
