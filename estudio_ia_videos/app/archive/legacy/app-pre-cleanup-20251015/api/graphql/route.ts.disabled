

import { NextRequest } from 'next/server'
import { ApolloServer } from '@apollo/server'
import { startServerAndCreateNextHandler } from '@as-integrations/next'
import { typeDefs } from '../../../lib/graphql/schema'
import { resolvers } from '../../../lib/graphql/resolvers'
import { getServerSession } from 'next-auth'

interface Context {
  user?: {
    id: string
    email: string
    name?: string
    role?: string
  }
  req: NextRequest
}

const server = new ApolloServer<Context>({
  typeDefs,
  resolvers,
  introspection: true, // Enable in development
  plugins: [
    {
      async requestDidStart() {
        return {
          async willSendResponse(requestContext) {
            // Add CORS headers
            requestContext.response.http.headers.set('Access-Control-Allow-Origin', '*')
            requestContext.response.http.headers.set('Access-Control-Allow-Methods', 'POST, GET, OPTIONS')
            requestContext.response.http.headers.set('Access-Control-Allow-Headers', 'Content-Type, Authorization')
          }
        }
      }
    }
  ]
})

const handler = startServerAndCreateNextHandler<NextRequest, Context>(server, {
  context: async (req: NextRequest): Promise<Context> => {
    try {
      // Get user session for authentication
      const session = await getServerSession()
      
      return {
        req,
        user: session?.user ? {
          id: session.user.id || '1',
          email: session.user.email || '',
          name: session.user.name || undefined,
          role: 'user'
        } : undefined
      }
    } catch (error) {
      console.error('Error getting session in GraphQL context:', error)
      return { req }
    }
  }
})

// Handle OPTIONS request for CORS
export async function OPTIONS() {
  return new Response(null, {
    status: 200,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'POST, GET, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type, Authorization',
    }
  })
}

export async function GET(request: NextRequest) {
  return handler(request)
}

export async function POST(request: NextRequest) {
  return handler(request)
}
