
export const dynamic = 'force-dynamic'

import { NextRequest, NextResponse } from 'next/server'
import { uploadFileToS3 } from '@/lib/s3-upload'
import { processPPTXFile } from '@/lib/pptx-processor-real'
import { getServerSession } from 'next-auth'
import { authConfig } from '@/lib/auth/auth-config'

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authConfig)
    if (!session?.user) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      )
    }

    const formData = await request.formData()
    const file = formData.get('file') as File
    const uploadId = formData.get('uploadId') as string || `upload_${Date.now()}`

    if (!file) {
      return NextResponse.json(
        { error: 'Nenhum arquivo foi enviado' },
        { status: 400 }
      )
    }

    console.log(`üöÄ Processing upload: ${file.name}`)

    // Step 1: Upload to S3
    const uploadResult = await uploadFileToS3(
      file, 
      'pptx-real/',
      {
        onProgress: (progress) => {
          console.log(`üì§ Upload: ${progress.percentage}%`)
        }
      }
    )

    if (!uploadResult.success) {
      return NextResponse.json(
        { error: uploadResult.error || 'Upload failed' },
        { status: 500 }
      )
    }

    // Step 2: Process PPTX
    const processingResult = await processPPTXFile(file, {
      extractImages: true,
      generateThumbnails: true,
      estimateDurations: true,
      createTimeline: true,
      analyzeAnimations: false,
      onProgress: (progress) => {
        console.log(`üîÑ Processing: ${progress.step}`)
      }
    })

    if (!processingResult.success) {
      return NextResponse.json({
        success: false,
        error: processingResult.error,
        upload: uploadResult
      }, { status: 500 })
    }

    const project = {
      id: uploadId,
      name: file.name.replace(/\.[^/.]+$/, ""),
      upload: uploadResult,
      processing: processingResult,
      createdAt: new Date().toISOString(),
      userId: session.user.id
    }

    console.log(`‚úÖ Upload processed successfully: ${processingResult.stats.slideCount} slides`)

    return NextResponse.json({
      success: true,
      project,
      stats: processingResult.stats,
      message: 'Arquivo processado com sucesso'
    })

  } catch (error) {
    console.error('‚ùå Upload error:', error)
    return NextResponse.json(
      { 
        success: false,
        error: error instanceof Error ? error.message : 'Erro interno do servidor'
      },
      { status: 500 }
    )
  }
}

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const uploadId = searchParams.get('uploadId')

    if (!uploadId) {
      return NextResponse.json(
        { error: 'Upload ID √© obrigat√≥rio' },
        { status: 400 }
      )
    }

    // In production, you'd check Redis or database for real progress
    // For now, return a simple status
    return NextResponse.json({
      uploadId,
      progress: 100,
      status: 'completed',
      message: 'Upload conclu√≠do'
    })

  } catch (error) {
    console.error('Error getting upload status:', error)
    return NextResponse.json(
      { error: 'Erro interno do servidor' },
      { status: 500 }
    )
  }
}
